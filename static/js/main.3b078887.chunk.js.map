{"version":3,"sources":["api/PATHS.ts","api/api.ts","features/Profile/profile-reducer.ts","common/error-handler.ts","features/Login/auth-reducer.ts","components/InputText.tsx","components/Checkbox.tsx","components/Button.tsx","features/Login/Login.tsx","features/Password/PasswordCreation/PasswordCreation.tsx","features/Password/PasswordRecovery/password-recovery-reducer.ts","components/StyledForm.ts","features/Password/PasswordRecovery/PasswordRecoverForm.tsx","features/Password/PasswordRecovery/FormContainer.tsx","features/Password/PasswordRecovery/PasswordRecovery.tsx","features/Profile/Profile.tsx","features/SignUp/sign-up-reducer.ts","features/SignUp/SignUp.tsx","features/PacksTable/Pack/packs-reducer.ts","features/PacksTable/UpdatePackForm/UpdatePackForm.tsx","features/PacksTable/Pack/Pack.tsx","features/PacksTable/AddPackForm/AddPackForm.tsx","features/PacksTable/SuperDoubleRange.tsx","features/PacksTable/Pack/reducer-search.ts","features/PacksTable/Pagination.tsx","features/PacksTable/PacksTable.tsx","app/App.tsx","reportWebVitals.ts","app/app-reducer.ts","features/CardsTable/Card/cards-reducer.ts","app/store.ts","index.tsx"],"names":["PATHS","instance","axios","create","baseURL","withCredentials","loginAPI","loginParams","post","delete","passwordAPI","email","from","message","signUpAPI","password","packsAPI","getPacksParams","user_id","get","newPack","cardsPack","updatedPackData","put","packId","slice","createSlice","name","initialState","_id","avatar","reducers","setProfile","state","action","payload","actions","ProfileReducer","reducer","errorHandler","e","response","data","error","isLoggedIn","setIsLoggedIn","AuthReducer","InputText","type","onChange","onChangeText","onKeyPress","onEnter","restProps","InputTextWrapper","StyledInput","currentTarget","value","key","StyledError","styled","div","input","Checkbox","Button","StyledButton","button","Login","useSelector","auth","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","console","log","then","catch","resetForm","to","profile","StyledForm","handleSubmit","getFieldProps","recoverPassword","signUp","form","PasswordCreation","passwordRecoverSlice","forgotPassword","setForgotPassword","PasswordRecoveryReducer","PasswordRecoverForm","React","memo","placeholder","FormContainer","PasswordRecovery","props","createPassword","Profile","useEffect","res","className","src","alt","onClick","login","isSignedUp","setIsSignedUp","SignUpReducer","SignUp","setCardPacks","cardPacks","map","pack","packsReducer","UpdatePackForm","modalCloseHandler","getState","packUser_id","style","marginTop","Pack","cardsCount","updated","classes","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","useStyles","useState","top","left","transform","modalStyle","open","setOpen","handleClose","body","deletePackTC","Modal","onClose","AddPackForm","SuperDoubleRange","setValue2","min","max","setValue1","Slider","event","valueLabelDisplay","aria-labelledby","cardPageTotalCount","count","searchCardName","countSelect","cardPages","pagesList","Pagination","pagesCount","search","portionSize","pageCount","Math","ceil","pageList","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","filter","p","display","PacksTable","packs","value1","value2","setSortPacks","flexDirection","justifyContent","alignItems","fontSize","marginRight","fontWeight","textAlign","App","exact","path","main","render","pageNotFound","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","status","setAppStatus","setAppError","AppReducer","setCards","cardsPack_id","cards","extraReducers","builder","addCase","forEach","cardsReducer","rootReducer","combineReducers","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b078887.chunk.js","sourcesContent":["export enum PATHS {\r\n    main= '/',\r\n    profile = '/profile',\r\n    login = '/login',\r\n    createPassword = '/create-password',\r\n    recoverPassword = '/recover-password',\r\n    signUp = '/sign-up',\r\n    pageNotFound = '/404',\r\n    packs = '/packs'\r\n}","import axios from 'axios'\r\nimport {CardPackType} from \"../features/PacksTable/Pack/packs-reducer\";\r\nimport {CardType} from \"../features/CardsTable/Card/cards-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const loginAPI = {\r\n    login(loginParams: LoginParamsType) {\r\n        return instance.post<LoginResponseType>('auth/login', loginParams)\r\n    },\r\n    me() {\r\n        return instance.post<any>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<any>('auth/me')\r\n    }\r\n}\r\n\r\nexport const passwordAPI = {\r\n    recover(email: string, from: string) {\r\n        return instance.post<PassportRecoveryResponseType>('auth/forgot', {\r\n            email,\r\n            from,\r\n            message: `<div style=\"background-color: lime; padding: 15px\">error: string;password recovery link:<a href='https://neko-back.herokuapp.com/2.0/#/set-new-password/$token$'></a>link</a></div>`\r\n        })\r\n    }\r\n}\r\n\r\nexport const signUpAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post<SignUpResponseType>('auth/register', {email, password})\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(getPacksParams: GetPacksParamsType) {\r\n        const {\r\n            user_id\r\n        } = getPacksParams\r\n        return instance.get<GetPacksResponseType>(`cards/pack?pageCount=1000&page=4&user_id=${user_id}&sortPacks=0updated`)\r\n    },\r\n    addPack(newPack: AddPackParamsType) {\r\n        return instance.post('cards/pack', {cardsPack: newPack})\r\n    },\r\n    updatePack(updatedPackData: UpdatePackParamsType) {\r\n        return instance.put('cards/pack', {cardsPack: updatedPackData})\r\n    },\r\n    deletePack(packId: string) {\r\n        return instance.delete(`cards/pack?id=${packId}`)\r\n    }\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getPacks(page: number) {\r\n        return instance.get<TypeResponsePacks>(`cards/pack?pageCount=100&page=${page}`)\r\n            .then(response => response.data)\r\n    },\r\n    getCards(getCardsParams: GetCardsParamsType) {\r\n        const {\r\n            cardAnswer,\r\n            cardPack_id,\r\n            cardQuestion,\r\n            max,\r\n            min,\r\n        } = getCardsParams\r\n        return instance.get<GetCardsResponseType>(`cards/card?`\r\n            + `cardAnswer=${cardAnswer}`\r\n            + `&cardPack_id=${cardPack_id}`\r\n            + `&cardQuestion=${cardQuestion}`\r\n            + `&min=${min}`\r\n            + `&max=${max}`\r\n            + `&page=4`\r\n            + `&pageCount=1000`\r\n        )\r\n    },\r\n    addCard(newCard: AddCardParamsType) {\r\n        return instance.post('cards/card', newCard)\r\n    },\r\n    updateCard(updatedCardData: UpdateCardParamsType) {\r\n        return instance.put('cards/card', updatedCardData)\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return instance.delete(`cards/cars?id=${cardId}`)\r\n    }\r\n}\r\n\r\n// * Types\r\n\r\n// ** loginAPI Types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\nexport type TypeCards = {\r\n    cardsCount: number\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    _id: string\r\n}\r\nexport type TypeResponsePacks = {\r\n    cardPacks: TypeCards[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n// ** passwordAPI Types\r\n\r\ntype PassportRecoveryResponseType = {\r\n    info: string,\r\n    error: string\r\n}\r\n\r\n// ** signUpAPI Types\r\n\r\ntype SignUpResponseType = {\r\n    addedUser: any,\r\n    error?: string\r\n}\r\n\r\n// ** packsAPI Types\r\n\r\nexport type GetPacksParamsType = {\r\n    user_id?: string\r\n}\r\n\r\nexport type GetPacksResponseType = {\r\n    cardPacks: CardPackType[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type AddPackParamsType = {\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: number\r\n    private?: boolean\r\n}\r\n\r\nexport type UpdatePackParamsType = {\r\n    _id: string\r\n    name?: string\r\n}\r\n\r\n// ** cardsAPI Types\r\n\r\nexport type GetCardsParamsType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardPack_id: string\r\n    min?: number\r\n    max?: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: CardType[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type AddCardParamsType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n}\r\n\r\nexport type UpdateCardParamsType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    question?: string\r\n    comments?: string\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginAPI} from \"../../api/api\";\r\nimport {setIsLoggedIn} from \"../Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: ''\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'profile',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setProfile(state, action: PayloadAction<{_id: string, email: string, name: string, avatar: string | undefined}>) {\r\n            state._id = action.payload._id\r\n            state.email = action.payload.email\r\n            state.name = action.payload.name\r\n            state.avatar = action.payload.avatar\r\n        }\r\n    }\r\n})\r\n\r\n// thunks\r\n\r\nexport const getMe = () => (dispatch: Dispatch) => {\r\n    loginAPI.me()\r\n        .then(res => {\r\n            const {_id, email, name, avatar} = res.data\r\n            dispatch(setProfile({_id, email, name, avatar}))\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n        })\r\n}\r\n\r\nexport const {setProfile} = slice.actions\r\n\r\nexport const ProfileReducer = slice.reducer\r\n\r\ntype InitialStateType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string | undefined\r\n}","export const errorHandler = (e: any) => {\r\n    const error = e.response\r\n        ? e.response.data.error\r\n        : (e.message + ', more details in the console')\r\n}\r\n\r\n","import {loginAPI, LoginParamsType} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setProfile} from \"../Profile/profile-reducer\";\r\nimport {errorHandler} from \"../../common/error-handler\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{isLoggedIn: boolean}>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\n\r\nexport const AuthReducer = slice.reducer\r\n\r\n// thunks\r\nexport const loginTC = (loginParams: LoginParamsType) => (dispatch: Dispatch) => {\r\n    loginAPI.login(loginParams)\r\n        .then((response) => {\r\n            const {_id, email, name, avatar} = response.data\r\n            dispatch(setProfile({_id, email, name, avatar}))\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n        })\r\n        .catch(e => errorHandler(e))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    loginAPI.logout()\r\n        .then(() => {\r\n            dispatch(setIsLoggedIn({isLoggedIn: false}))\r\n        })\r\n        .catch(e => errorHandler(e))\r\n}\r\n\r\n// actions\r\nexport const {setIsLoggedIn} = slice.actions","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void;\r\n    onEnter?: () => void;\r\n    error?: string;\r\n};\r\n\r\nexport const InputText: React.FC<SuperInputTextPropsType> = ({\r\n                                                                 type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n                                                                 onChange,\r\n                                                                 onChangeText,\r\n                                                                 onKeyPress,\r\n                                                                 onEnter,\r\n                                                                 error,\r\n\r\n                                                                 ...restProps // все остальные пропсы попадут в объект restProps\r\n                                                             }) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && // если есть пропс onChange\r\n        onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" && // если нажата кнопка Enter\r\n        onEnter && // и есть пропс onEnter\r\n        onEnter(); // то вызвать его\r\n    };\r\n\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n    // Общие стили инпута\r\n    padding: 1rem 0.5rem;\r\n    margin-bottom: 20px;\r\n    height: 20px;\r\n    width: 400px;\r\n    \r\n   \r\n    border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n    position: absolute;\r\n    bottom: 1px;\r\n    // Стили текста ошибки\r\n    & > span {\r\n        \r\n        color: red;\r\n    }\r\n`;\r\n\r\n/*\r\nfont-size: ${({ theme }) => theme.font.size.s1};*/\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport styled, {StyledComponentProps} from \"styled-components/macro\";\r\n\r\ntype DefaultCheckboxPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultCheckboxPropsType & {\r\n    error?: string;\r\n};\r\n\r\nexport const Checkbox: React.FC<SuperCheckboxPropsType> = ({\r\n                                                               type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n                                                               error,\r\n                                                               ...restProps // все остальные пропсы попадут в объект restProps\r\n                                                           }) => {\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type=\"checkbox\"\r\n                {...restProps}\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n  // Общие стили инпута\r\n  padding: 1rem 0.5rem;\r\n  margin-bottom: 20px;\r\n  height: 20px;\r\n  width: 400px;\r\n\r\n\r\n  border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n  position: absolute;\r\n  bottom: 1px;\r\n  // Стили текста ошибки\r\n  & > span {\r\n\r\n    color: red;\r\n  }\r\n`;\r\n\r\n/*\r\nfont-size: ${({ theme }) => theme.font.size.s1};*/","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\nimport { ThemeType } from \"../common/Theme\";\r\n\r\n// тип пропсов обычной кнопки\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype PropsType = DefaultButtonPropsType;\r\n\r\nexport const Button: React.FC<PropsType> = ({ ...restProps }) => {\r\n    return <StyledButton {...restProps} />;\r\n};\r\n\r\n\r\n\r\n// Styles\r\nconst StyledButton = styled.button<StyledComponentProps<any, ThemeType, any, any>>`\r\n  border: none;\r\n  cursor: pointer;\r\n  color: white;\r\n  background-color:blue;\r\n  padding: 0.5rem 1rem;\r\n  width: 400px;\r\n  \r\n \r\n  &:hover {\r\n   background-color: grey;  \r\n  }\r\n`;\r\n","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport styled from \"styled-components/macro\";\r\nimport {InputText} from \"../../components/InputText\";\r\nimport {Checkbox} from \"../../components/Checkbox\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\nimport { Button } from \"../../components/Button\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATHS.profile}/>\r\n    }\r\n\r\n    return <>\r\n        <h2>Sign in</h2>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText error={formik.errors.email} type=\"email\" {...formik.getFieldProps('email')}/>\r\n            <div><NavLink to={PATHS.recoverPassword}>Forgot password?</NavLink></div>\r\n            <InputText error={formik.errors.password} type=\"password\" {...formik.getFieldProps('password')}/>\r\n            Remember me <Checkbox {...formik.getFieldProps('rememberMe')}/>\r\n            <Button>Login</Button>\r\n        </StyledForm>\r\n        <div>\r\n            <NavLink to={PATHS.signUp}>Sign up</NavLink>\r\n        </div>\r\n    </>\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n","import React from \"react\"\r\n\r\nexport const PasswordCreation: React.FC = () => {\r\n    return <div>Password Creation</div>\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {passwordAPI} from \"../../../api/api\";\r\nimport {errorHandler} from \"../../../common/error-handler\";\r\n\r\nconst initialState = {\r\n    forgotPassword: false\r\n};\r\n\r\nconst passwordRecoverSlice = createSlice({\r\n    name: \"passwordRecover\",\r\n    initialState,\r\n    reducers: {\r\n        setForgotPassword(state, action: PayloadAction<{forgotPassword: boolean}>) {\r\n            state.forgotPassword = action.payload.forgotPassword\r\n        }\r\n    }\r\n});\r\n\r\nexport const PasswordRecoveryReducer = passwordRecoverSlice.reducer;\r\n\r\n// * Action creators\r\nexport const {setForgotPassword} = passwordRecoverSlice.actions;\r\n\r\n// * Thunks Creators\r\nexport const passwordRecoveryTC = (email: string, from: string) => (dispatch: Dispatch) => {\r\n    passwordAPI.recover(email, from)\r\n        .then(() => {\r\n            debugger\r\n            setForgotPassword({forgotPassword: true})\r\n        })\r\n        .catch(e => errorHandler(e))\r\n}","import styled from \"styled-components/macro\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;","import { InputText } from \"../../../components/InputText\";\r\nimport { Button } from \"../../../components/Button\";\r\nimport React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport {passwordRecoveryTC} from \"./password-recovery-reducer\";\r\nimport { StyledForm } from \"../../../components/StyledForm\";\r\n\r\nexport const PasswordRecoverForm = React.memo(() => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(passwordRecoveryTC(values.email, 'test-front-admin <nikita11042000@gmail.com>'))\r\n        }\r\n    });\r\n\r\n    return (\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"Email\"} error={formik.errors.email} {...formik.getFieldProps(\"email\")} />\r\n            <Button type=\"submit\">Recover</Button>\r\n        </StyledForm>\r\n    );\r\n})\r\n\r\n// Types\r\ntype FormikErrorType = {\r\n    email?: string\r\n}","import styled from \"styled-components/macro\";\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  height: 80%;\r\n  \r\n  align-self: center;\r\n  \r\n  &:only-child {\r\n    width: 50%;\r\n  }\r\n`","import React from \"react\";\r\nimport { PasswordRecoverForm } from \"./PasswordRecoverForm\";\r\nimport { FormContainer } from \"./FormContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../../api/PATHS\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\nexport const PasswordRecovery = (props: any) => {\r\n    const forgotPassword = useSelector<AppRootStateType, boolean>(state => state.recoverPassword.forgotPassword)\r\n\r\n    if (forgotPassword) {\r\n        return <Redirect to={PATHS.createPassword} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Password recovery</h2>\r\n            <FormContainer>\r\n                <PasswordRecoverForm/>\r\n            </FormContainer>\r\n        </>\r\n    );\r\n};\r\n","import React, {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\nimport {logoutTC} from \"../Login/auth-reducer\";\r\nimport {getMe} from \"./profile-reducer\";\r\n\r\nexport const Profile: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.name)\r\n    const avatar = useSelector<AppRootStateType, string | undefined>(state => state.profile.avatar)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMe())\r\n    }, [])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATHS.login}/>\r\n    }\r\n\r\n    return <>\r\n        <h2>Profile</h2>\r\n        <div className=\"imgWrapper\">\r\n            <img src={avatar} alt=\"avatar\"/>\r\n        </div>\r\n        <div>\r\n            Name: {name}\r\n        </div>\r\n        {isLoggedIn && <button onClick={logoutHandler} >Logout</button>}\r\n    </>\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {signUpAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    isSignedUp: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'signUp',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsSignedUp(state, action: PayloadAction<{isSignedUp: boolean}>) {\r\n            state.isSignedUp = action.payload.isSignedUp\r\n        }\r\n    }\r\n})\r\n\r\nexport const SignUpReducer = slice.reducer\r\n\r\nexport const {setIsSignedUp} = slice.actions\r\n\r\n// thunks\r\nexport const singUpTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    signUpAPI.register(email, password)\r\n        .then(() => {\r\n            debugger\r\n            setIsSignedUp({isSignedUp: true})\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n        })\r\n}","import React, {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport {InputText} from \"../../components/InputText\";\r\nimport { Button } from \"../../components/Button\";\r\nimport {setIsSignedUp, singUpTC} from \"./sign-up-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const SignUp: React.FC = () => {\r\n\r\n    const isSignedUp = useSelector<AppRootStateType, boolean>(state => state.signUp.isSignedUp)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(singUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isSignedUp) {\r\n        return <Redirect to={PATHS.login}/>\r\n    }\r\n\r\n    return <>\r\n        <h2>Sign up</h2>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText error={formik.errors.email} type=\"email\" {...formik.getFieldProps('email')}/>\r\n            <InputText error={formik.errors.password} type=\"password\" {...formik.getFieldProps('password')}/>\r\n            <Button>Sign Up</Button>\r\n        </StyledForm>\r\n    </>\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n","import {createSlice, PayloadAction, ThunkAction} from \"@reduxjs/toolkit\";\r\nimport {AddPackParamsType, GetPacksParamsType, packsAPI, UpdatePackParamsType} from \"../../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {setProfile} from \"../../Profile/profile-reducer\";\r\nimport {errorHandler} from \"../../../common/error-handler\";\r\n\r\nconst initialState: Array<CardPackType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'packs',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setCardPacks(state, action: PayloadAction<{ cardPacks: CardPackType[] }>) {\r\n            return action.payload.cardPacks.map(pack => ({...pack}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const packsReducer = slice.reducer\r\n\r\nexport const {setCardPacks} = slice.actions\r\n\r\n// * Thunks\r\n\r\nexport const fetchPacksTC = (getPacksParams: GetPacksParamsType): ThunkType => (dispatch: Dispatch) => {\r\n    packsAPI.getPacks(getPacksParams)\r\n        .then(response => {\r\n            dispatch(setCardPacks({cardPacks: response.data.cardPacks}))\r\n        })\r\n        .catch(e => errorHandler(e))\r\n}\r\n\r\nexport const addPackTC = (newPack: AddPackParamsType): ThunkType => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    packsAPI.addPack(newPack)\r\n        .then(() => {\r\n            const packUser_id = getState().profile._id\r\n            return packsAPI.getPacks({user_id: packUser_id})\r\n        })\r\n        .then(response => {\r\n            dispatch(setCardPacks({cardPacks: response.data.cardPacks}))\r\n        })\r\n        .catch(e => errorHandler(e))\r\n}\r\n\r\nexport const updatePackTC = (updatedPackData: UpdatePackParamsType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    packsAPI.updatePack(updatedPackData)\r\n        .then(() => {\r\n            const packUser_id = getState().profile._id\r\n            return packsAPI.getPacks({user_id: packUser_id})\r\n        })\r\n        .then(response => {\r\n            dispatch(setCardPacks({cardPacks: response.data.cardPacks}))\r\n        })\r\n        .catch(e => errorHandler(e))\r\n}\r\n\r\nexport const deletePackTC = (packId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    packsAPI.deletePack(packId)\r\n        .then((res) => {\r\n            const packUser_id = getState().profile._id\r\n            return packsAPI.getPacks({user_id: packUser_id})\r\n        })\r\n        .then(response => {\r\n            dispatch(setCardPacks({cardPacks: response.data.cardPacks}))\r\n        })\r\n        .catch(e => errorHandler(e))\r\n}\r\n\r\n// * Types\r\n\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    type: 'pack' | 'folder'\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n}\r\n\r\ntype SliceActions<T> = {\r\n    [K in keyof T]: T[K] extends (...args: any[]) => infer A ? A : never;\r\n}[keyof T]\r\n\r\ntype ActionTypes = SliceActions<typeof slice.actions>\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionTypes>","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {addPackTC, updatePackTC} from \"../Pack/packs-reducer\";\r\nimport {StyledForm} from \"../../../components/StyledForm\";\r\nimport {InputText} from \"../../../components/InputText\";\r\nimport {Button} from \"../../../components/Button\";\r\n\r\ntype UpdatePackFormType = {\r\n    _id: string\r\n    modalCloseHandler?: () => void\r\n}\r\n\r\nexport const UpdatePackForm: React.FC<UpdatePackFormType> = ({_id, modalCloseHandler}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: ''\r\n        },\r\n        validate: values => {\r\n            const errors = {} as FormikErrorsType\r\n            if (!values.name) {\r\n                errors.name = 'Name required'\r\n            }\r\n            if (values.name.length > 100) {\r\n                errors.name = 'Name is too long'\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            console.log({_id, ...values})\r\n            dispatch(updatePackTC({_id, ...values}))\r\n            if (modalCloseHandler) {\r\n                modalCloseHandler()\r\n            }\r\n        }\r\n    })\r\n\r\n    return <div style={{marginTop: '20px'}}>\r\n        <h3>Update pack</h3>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"Change name\"} error={formik.errors.name} {...formik.getFieldProps(\"name\")} />\r\n            <Button type=\"submit\">Update pack</Button>\r\n        </StyledForm>\r\n    </div>\r\n}\r\n\r\ntype FormikErrorsType = {\r\n    name?: string\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {Button} from \"../../../components/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deletePackTC} from \"./packs-reducer\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {UpdatePackForm} from \"../UpdatePackForm/UpdatePackForm\";\r\n\r\ntype PackPropsType = {\r\n    packId: string\r\n    name: string\r\n    cardsCount: number\r\n    updated: string\r\n}\r\n\r\nexport const Pack: React.FC<PackPropsType> = ({packId, name, cardsCount, updated}) => {\r\n\r\n    // Modal window code\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            position: 'absolute',\r\n            width: 400,\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }));\r\n\r\n    function getModalStyle() {\r\n        const top = 50;\r\n        const left = 50;\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState<boolean>(false)\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <UpdatePackForm _id={packId} modalCloseHandler={handleClose}/>\r\n        </div>\r\n    );\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deletePackTC(packId))\r\n    }\r\n    return<>\r\n\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{cardsCount}</td>\r\n            <td>{updated}</td>\r\n            <td>\r\n                <button type=\"button\"  onClick={deleteHandler}>Delete</button>\r\n            </td>\r\n            <td>\r\n                <button type=\"button\" onClick={handleOpen}>Update</button>\r\n            </td>\r\n        </tr>\r\n        <Modal open={open} onClose={handleClose}>\r\n            {body}\r\n        </Modal>\r\n\r\n    </>\r\n}","import {InputText} from \"../../../components/InputText\";\r\nimport {Button} from \"../../../components/Button\";\r\nimport React from \"react\";\r\nimport {StyledForm} from \"../../../components/StyledForm\";\r\nimport {useFormik} from \"formik\";\r\nimport {addPackTC, fetchPacksTC} from \"../Pack/packs-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const AddPackForm: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: ''\r\n        },\r\n        validate: values => {\r\n            const errors = {} as FormikErrorsType\r\n            if (!values.name) {\r\n                errors.name = 'Name required'\r\n            }\r\n            if (values.name.length > 100) {\r\n                errors.name = 'Name is too long'\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(addPackTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n\r\n    return <div style={{marginTop: '20px'}}>\r\n        <h3>Add pack</h3>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"name\"} error={formik.errors.name} {...formik.getFieldProps(\"name\")} />\r\n            <Button type=\"submit\">Add pack</Button>\r\n        </StyledForm>\r\n    </div>\r\n}\r\n\r\ntype FormikErrorsType = {\r\n    name?: string\r\n}\r\n\r\n","import React from \"react\";\r\nimport Slider from '@material-ui/core/Slider';\r\nimport s from './SuperRange.module.css'\r\ntype SuperDoubleRangePropsType = {\r\n    setValue2:(value:number)=>void\r\n    setValue1:(value:number)=>void\r\n    max:number\r\n    min:number\r\n\r\n}\r\n\r\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\r\n    {\r\n        setValue2,min,max,setValue1\r\n\r\n    }\r\n) => {\r\n\r\n    const onChange = (event: React.ChangeEvent<{}>, value:any) => {\r\n        // console.log(event)\r\n        setValue1(value[0])\r\n        setValue2(value[1])\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ width: '400px' }}>\r\n        <Slider\r\n            value={[min,max]}\r\n    onChange={onChange}\r\n    valueLabelDisplay='auto'\r\n    aria-labelledby=\"range-slider\"\r\n    max={10}\r\n    min={0}\r\n\r\n\r\n\r\n    />\r\n    </div>\r\n);\r\n}\r\n\r\nexport default SuperDoubleRange;","let initialState = {\r\n    cardPageTotalCount: 1609,\r\n    count: 10,\r\n    searchCardName: '',\r\n    countSelect:10,\r\n    cardPages:9,\r\n    pagesList:1,\r\n\r\n}\r\n\r\nexport const reducerSearch =\r\n    (state: SearchInitialStateType = initialState, action: ActionTypeSearch): SearchInitialStateType => {\r\n        switch (action.type) {\r\n            case 'SEARCH/CHANGE-TEXT-SEARCH':\r\n                return {...state, searchCardName: action.searchCardName}\r\n            case 'SEARCH/COUNT-OF-CARD':\r\n                return {...state, cardPages: action.count}\r\n            case \"SEARCH/PAGE-COUNT\":\r\n                return {...state,pagesList:action.pagesList}\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n//ActionCreator\r\n//???\r\nexport const cardNameAC = (searchCardName: string) => ({type: 'SEARCH/CHANGE-TEXT-SEARCH', searchCardName} as const)\r\nexport const cardCountAC = (count: number) => ({type: 'SEARCH/COUNT-OF-CARD',count} as const)\r\nexport const pagesListAC = (pagesList: number) => ({type: 'SEARCH/PAGE-COUNT',pagesList} as const)\r\n\r\n// Action Type\r\nexport type CardNameACType = ReturnType<typeof cardNameAC>\r\nexport type CardCountACType = ReturnType<typeof cardCountAC>\r\nexport type PagesListACACType = ReturnType<typeof pagesListAC>\r\n\r\n// Type\r\nexport type SearchInitialStateType = typeof initialState\r\n\r\ntype ActionTypeSearch =\r\n    | CardNameACType\r\n    | CardCountACType\r\n    | PagesListACACType","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {cardCountAC} from \"../PacksTable/Pack/reducer-search\";\r\nimport SuperSelect from \"../PacksTable/Pack/SuperSelect\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst Pagination = () => {\r\n    const pagesCount = useSelector<AppRootStateType,number>((state)=>state.search.cardPageTotalCount)\r\n    const portionSize = useSelector<AppRootStateType,number>((state)=>state.search.count)\r\n    let pageCount = Math.ceil(pagesCount/portionSize)\r\n    let pageList = []\r\n    for(let i=0; i<pageCount;i++){\r\n        pageList.push(i)\r\n    }\r\n    let portionCount = Math.ceil(pageCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    const dispatch = useDispatch()\r\n    const onChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(cardCountAC(+e))\r\n    }\r\n    return (\r\n        <div>\r\n           {/* <SuperSelect onChangeOption={onChangeHandler} options={['3','4','5','6','7','8','9']}/>*/}\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {setPortionNumber(portionNumber - 1)}}>PREV</button>}\r\n            {pageList\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span style={{width:'30px',display:'alignItems'}}\r\n                    >{p}-</span>\r\n                })}\r\n            {portionCount > portionNumber && <button onClick={() => {setPortionNumber(portionNumber + 1)}}>\r\n                NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {CardPackType, fetchPacksTC } from \"./Pack/packs-reducer\";\r\nimport {Pack} from \"./Pack/Pack\";\r\nimport {AddPackForm} from \"./AddPackForm/AddPackForm\";\r\nimport  SuperDoubleRange  from \"./SuperDoubleRange\";\r\n//import {Pagination} from 'antd';\r\nimport Pagination from \"./Pagination\";\r\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop';\r\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom';\r\ntype TypeSort = 'max' | 'min' | 'middle';\r\n\r\n\r\nexport const PacksTable: React.FC = () => {\r\n\r\n    const packUser_id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const packs = useSelector<AppRootStateType, Array<CardPackType>>(state => state.packs)\r\n    const dispatch = useDispatch()\r\n    //\r\n     const [value1, setValue1] = useState<number>(0);\r\n     const [value2, setValue2] = useState<number>(10);\r\n    //\r\n    let [sortPacks, setSortPacks] = useState<TypeSort>(\"middle\");\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPacksTC({user_id: packUser_id}))\r\n    }, [])\r\n    //const [pageCount, setPageCount] = useState<number>(10);\r\n\r\n    const sortMax = () => {\r\n        setSortPacks(\"max\")\r\n    }\r\n    const sortMin = () => {\r\n        setSortPacks(\"min\")\r\n    }\r\n    return <div style={ {display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'} }>\r\n\r\n        <div>\r\n            <div>\r\n                <span style={{fontSize:'20px',marginRight:'10px'}}>Search:</span>\r\n                <input placeholder='Enter name'  type=\"text\"/>\r\n            </div>\r\n            <div>\r\n                <div style={{fontWeight:'bold',textAlign:'center'}}>Filtering by the count of cards</div>\r\n                <SuperDoubleRange setValue2={setValue2} setValue1={setValue1} max={value2} min={value1}/>\r\n            </div>\r\n\r\n            <div>\r\n                <VerticalAlignTopIcon onClick={sortMax}/>\r\n                <VerticalAlignBottomIcon onClick={sortMin}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Pagination/>\r\n            </div>\r\n\r\n        </div>\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Pack name</th>\r\n                <th>Cards count</th>\r\n                <th>Updated</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {packs.length === 0 && 'Waiting for your cards —ฅ/ᐠ.̫ .ᐟ\\\\ฅ—'}\r\n            {\r\n                packs.map(pack => {\r\n                    return <Pack\r\n                        key={pack._id}\r\n                        packId={pack._id}\r\n                        name={pack.name}\r\n                        cardsCount={pack.cardsCount}\r\n                        updated={pack.updated}\r\n                    />\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n        <div style={ {display: 'flex', flexDirection: 'column', justifyContent: 'center'} }>\r\n            <AddPackForm/>\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect} from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {PasswordCreation} from \"../features/Password/PasswordCreation/PasswordCreation\";\r\nimport {PasswordRecovery} from \"../features/Password/PasswordRecovery/PasswordRecovery\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {SignUp} from \"../features/SignUp/SignUp\";\r\nimport {PATHS} from \"../api/PATHS\";\r\nimport {PacksTable} from \"../features/PacksTable/PacksTable\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header>\r\n                <h1>CARDS APP</h1>\r\n                <nav className=\"nav\">\r\n                    <div><NavLink to={PATHS.profile}>profile</NavLink></div>\r\n                    <div><NavLink to={PATHS.login}>login</NavLink></div>\r\n                    <div><NavLink to={PATHS.createPassword}>createPassword</NavLink></div>\r\n                    <div><NavLink to={PATHS.recoverPassword}>recoverPassword</NavLink></div>\r\n                    <div><NavLink to={PATHS.signUp}>signUp</NavLink></div>\r\n                    <div><NavLink to={PATHS.packs}>packs</NavLink></div>\r\n                </nav>\r\n            </header>\r\n            <div className=\"contentContainer\">\r\n                <Switch>\r\n                    <Route exact path={PATHS.main} render={() => <Profile/>}/>\r\n                    <Route path={PATHS.profile} render={() => <Profile/>}/>\r\n                    <Route path={PATHS.login} render={() => <Login/>}/>\r\n                    <Route path={PATHS.createPassword} render={() => <PasswordCreation/>}/>\r\n                    <Route path={PATHS.recoverPassword} render={() => <PasswordRecovery/>}/>\r\n                    <Route path={PATHS.signUp} render={() => <SignUp/>}/>\r\n                    <Route path={PATHS.packs} render={() => <PacksTable/>}/>\r\n                    <Route path={PATHS.pageNotFound} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={PATHS.pageNotFound}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginAPI} from \"../api/api\";\r\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        }\r\n    }\r\n})\r\n\r\nexport const AppReducer = slice.reducer\r\n\r\nexport const {\r\n    setAppStatus,\r\n    setAppError,\r\n} = slice.actions\r\n\r\n\r\n// action types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>\r\nexport type ActionTypes = SetAppStatusActionType | SetAppErrorActionType\r\n\r\n// types\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setCardPacks} from \"../../PacksTable/Pack/packs-reducer\";\r\nimport {AddCardParamsType, cardsAPI, GetCardsParamsType, UpdateCardParamsType} from \"../../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState: InitialStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'cards',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setCards(state, action: PayloadAction<{cards: CardType[], cardsPack_id: string}>) {\r\n            state[action.payload.cardsPack_id] = action.payload.cards\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(setCardPacks, (state, action) => {\r\n            action.payload.cardPacks.forEach((pack: { _id: string | number; }) => {\r\n                state[pack._id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const cardsReducer = slice.reducer\r\n\r\nexport const {setCards} = slice.actions\r\n\r\n// * Thunks\r\n\r\nexport const fetchCardsTC = (getCardsParams: GetCardsParamsType) => (dispatch: Dispatch) => {\r\n    cardsAPI.getCards(getCardsParams)\r\n        .then(response => {\r\n            dispatch(setCards({cards: response.data.cards, cardsPack_id: getCardsParams.cardPack_id}))\r\n        })\r\n}\r\n\r\nexport const addCardTC = (newCard: AddCardParamsType) => () => {\r\n    cardsAPI.addCard(newCard)\r\n        .then(() => {\r\n            fetchCardsTC({cardPack_id: newCard.cardsPack_id})\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (updatedCardData: UpdateCardParamsType) => () => {\r\n    cardsAPI.updateCard(updatedCardData)\r\n        .then(() => {\r\n            fetchCardsTC({cardPack_id: updatedCardData.cardsPack_id})\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (cardId: string, cardsPack_id: string) => () => {\r\n    cardsAPI.deleteCard(cardId)\r\n        .then(() => {\r\n            fetchCardsTC({cardPack_id: cardsPack_id})\r\n        })\r\n}\r\n\r\n// * Types\r\n\r\ntype InitialStateType = {\r\n    [key: string]: Array<CardType>\r\n}\r\n\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: 'card'\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    _id: string\r\n}","import {combineReducers} from \"redux\";\r\nimport {AuthReducer} from \"../features/Login/auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {AppReducer} from \"./app-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {PasswordRecoveryReducer} from \"../features/Password/PasswordRecovery/password-recovery-reducer\";\r\nimport {ProfileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {SignUpReducer} from \"../features/SignUp/sign-up-reducer\";\r\nimport {packsReducer} from \"../features/PacksTable/Pack/packs-reducer\";\r\n//import {paskReducer} from \"../features/PacksTable/paskReducer\";\r\nimport {cardsReducer} from \"../features/CardsTable/Card/cards-reducer\";\r\nimport {reducerSearch} from \"../features/PacksTable/Pack/reducer-search\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: AuthReducer,\r\n    app: AppReducer,\r\n    // createPassword: PasswordCreationReducer,\r\n    recoverPassword: PasswordRecoveryReducer,\r\n    profile: ProfileReducer,\r\n    signUp: SignUpReducer,\r\n   // packs: paskReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    search:reducerSearch,\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}