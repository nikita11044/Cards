{"version":3,"sources":["api/cards-api.ts","features/Login/auth-reducer.ts","components/InputText.tsx","components/Checkbox.tsx","components/Button.tsx","features/Login/Login.tsx","features/Password/PasswordCreation/PasswordCreation.tsx","features/Password/PasswordRecovery/password-recovery-reducer.ts","features/Password/PasswordRecovery/PasswordRecoverForm.tsx","features/Password/PasswordRecovery/FormContainer.tsx","features/Password/PasswordRecovery/PasswordRecovery.tsx","features/Profile/Profile.tsx","features/SignUp/SignUp.tsx","app/App.tsx","reportWebVitals.ts","app/app-reducer.ts","app/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","cardsAPI","loginParams","post","passwordAPI","email","from","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","AuthReducer","reducer","actions","InputText","type","onChange","onChangeText","onKeyPress","onEnter","error","restProps","InputTextWrapper","StyledInput","e","currentTarget","value","key","StyledError","styled","div","input","Checkbox","Button","StyledButton","button","Login","useSelector","auth","dispatch","useDispatch","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","length","onSubmit","console","log","then","catch","response","data","resetForm","to","StyledForm","handleSubmit","getFieldProps","form","PasswordCreation","passwordRecoverSlice","forgotPassword","setForgotPassword","PasswordRecoveryReducer","PasswordRecoverForm","recoverPassword","placeholder","FormContainer","PasswordRecovery","props","Profile","SignUp","App","className","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","status","isInitialized","setAppStatus","setAppError","setIsInitialized","AppReducer","rootReducer","combineReducers","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0629e6d8.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const cardsAPI = {\r\n    login(loginParams: LoginParamsType) {\r\n        return instance.post<LoginResponseType>('auth/login', loginParams)\r\n    }\r\n}\r\n\r\nexport const passwordAPI = {\r\n    recover(email: string, from: string) {\r\n        return instance.post<PassportRecoveryResponseType>('auth/forgot', {email, from, message: `<div style=\"background-color: lime; padding: 15px\">error: string;password recovery link:<a href='http://localhost:3000/#/set-new-password/$token$'></a>link</a></div>`})\r\n    }\r\n}\r\n\r\nexport const signUpAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post<SignUpResponseType>('auth/register', {email, password})\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\ntype PassportRecoveryResponseType = {\r\n    info: string,\r\n    error: string\r\n}\r\n\r\ntype SignUpResponseType = {\r\n    addedUser: any,\r\n    error?: string\r\n}","import {cardsAPI, LoginParamsType} from \"../../api/cards-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{isLoggedIn: boolean}>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\n\r\nexport const AuthReducer = slice.reducer\r\n\r\n// thunks\r\nexport const loginTC = (loginParams: LoginParamsType) => (dispatch: Dispatch) => {\r\n    cardsAPI.login(loginParams)\r\n        .then(() => {\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n        })\r\n}\r\n\r\n\r\n// actions\r\nexport const {setIsLoggedIn} = slice.actions","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void;\r\n    onEnter?: () => void;\r\n    error?: string;\r\n};\r\n\r\nexport const InputText: React.FC<SuperInputTextPropsType> = ({\r\n                                                                 type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n                                                                 onChange,\r\n                                                                 onChangeText,\r\n                                                                 onKeyPress,\r\n                                                                 onEnter,\r\n                                                                 error,\r\n\r\n                                                                 ...restProps // все остальные пропсы попадут в объект restProps\r\n                                                             }) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && // если есть пропс onChange\r\n        onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" && // если нажата кнопка Enter\r\n        onEnter && // и есть пропс onEnter\r\n        onEnter(); // то вызвать его\r\n    };\r\n\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n    // Общие стили инпута\r\n    padding: 1rem 0.5rem;\r\n    margin-bottom: 20px;\r\n    height: 20px;\r\n    width: 400px;\r\n    \r\n   \r\n    border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n    position: absolute;\r\n    bottom: 1px;\r\n    // Стили текста ошибки\r\n    & > span {\r\n        \r\n        color: red;\r\n    }\r\n`;\r\n\r\n/*\r\nfont-size: ${({ theme }) => theme.font.size.s1};*/\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport styled, {StyledComponentProps} from \"styled-components/macro\";\r\n\r\ntype DefaultCheckboxPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultCheckboxPropsType & {\r\n    error?: string;\r\n};\r\n\r\nexport const Checkbox: React.FC<SuperCheckboxPropsType> = ({\r\n                                                               type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n                                                               error,\r\n                                                               ...restProps // все остальные пропсы попадут в объект restProps\r\n                                                           }) => {\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type=\"checkbox\"\r\n                {...restProps}\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n  // Общие стили инпута\r\n  padding: 1rem 0.5rem;\r\n  margin-bottom: 20px;\r\n  height: 20px;\r\n  width: 400px;\r\n\r\n\r\n  border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n  position: absolute;\r\n  bottom: 1px;\r\n  // Стили текста ошибки\r\n  & > span {\r\n\r\n    color: red;\r\n  }\r\n`;\r\n\r\n/*\r\nfont-size: ${({ theme }) => theme.font.size.s1};*/","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\nimport { ThemeType } from \"../common/Theme\";\r\n\r\n// тип пропсов обычной кнопки\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype PropsType = DefaultButtonPropsType;\r\n\r\nexport const Button: React.FC<PropsType> = ({ ...restProps }) => {\r\n    return <StyledButton {...restProps} />;\r\n};\r\n\r\n\r\n\r\n// Styles\r\nconst StyledButton = styled.button<StyledComponentProps<any, ThemeType, any, any>>`\r\n  border: none;\r\n  cursor: pointer;\r\n  color: white;\r\n  background-color:blue;\r\n  padding: 0.5rem 1rem;\r\n  width: 400px;\r\n  \r\n \r\n  &:hover {\r\n   background-color: grey;  \r\n  }\r\n`;\r\n","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {NavLink, Redirect } from \"react-router-dom\";\r\nimport styled from \"styled-components/macro\";\r\nimport {InputText} from \"../../components/InputText\";\r\nimport {Checkbox} from \"../../components/Checkbox\";\r\nimport { Button } from \"../../components/Button\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <StyledForm onSubmit={formik.handleSubmit}>\r\n        <InputText type=\"email\" {...formik.getFieldProps('email')}/>\r\n        <div>\r\n            <NavLink to={'/recover-password'}>Forgot password?</NavLink>\r\n        </div>\r\n        <InputText type=\"password\" {...formik.getFieldProps('password')}/>\r\n        Remember me <Checkbox {...formik.getFieldProps('rememberMe')}/>\r\n        <Button>Login</Button>\r\n    </StyledForm>\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n","import React from \"react\"\r\n\r\nexport const PasswordCreation: React.FC = () => {\r\n    return <div>Password Creation</div>\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {cardsAPI, passwordAPI} from \"../../../api/cards-api\";\r\n\r\nexport const initialState = {\r\n    forgotPassword: false\r\n};\r\n\r\nconst passwordRecoverSlice = createSlice({\r\n    name: \"passwordRecover\",\r\n    initialState,\r\n    reducers: {\r\n        setForgotPassword(state, action: PayloadAction<{forgotPassword: boolean}>) {\r\n            state.forgotPassword = action.payload.forgotPassword\r\n        }\r\n    }\r\n});\r\n\r\nexport const PasswordRecoveryReducer = passwordRecoverSlice.reducer;\r\n\r\n// * Action creators\r\nexport const {setForgotPassword} = passwordRecoverSlice.actions;\r\n\r\n// * Thunks Creators\r\nexport const passwordRecoveryTC = (email: string, from: string) => (dispatch: Dispatch) => {\r\n    passwordAPI.recover(email, from)\r\n        .then(() => {\r\n            setForgotPassword({forgotPassword: true})\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n        })\r\n}","import { InputText } from \"../../../components/InputText\";\r\nimport { Button } from \"../../../components/Button\";\r\nimport React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport {passwordRecoveryTC} from \"./password-recovery-reducer\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const PasswordRecoverForm: React.FC = () => {\r\n\r\n    const forgotPassword = useSelector<AppRootStateType, boolean>(state => state.recoverPassword.forgotPassword)\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(passwordRecoveryTC(values.email, 'test-front-admin <nikita11042000@gmail.com>'))\r\n        }\r\n    });\r\n\r\n    if (forgotPassword) {\r\n        return <Redirect to={'/create-password'} />\r\n    }\r\n\r\n    return (\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n\r\n            <InputText placeholder={\"Email\"} error={formik.errors.email} {...formik.getFieldProps(\"email\")} />\r\n\r\n            <Button type=\"submit\">Recover</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\n// Styles\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n\r\n// Types\r\ntype FormikErrorType = {\r\n    email?: string\r\n}","import styled from \"styled-components/macro\";\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  height: 80%;\r\n  \r\n  align-self: center;\r\n  \r\n  &:only-child {\r\n    width: 50%;\r\n  }\r\n`","/*import React from \"react\"\r\nimport { PasswordRecoverForm } from \"./PasswordRecoverForm\";\r\nexport const PasswordRecovery: React.FC = () => {\r\n    return (<div>Password Recovery\r\n            <PasswordRecoverForm/>\r\n    </div>\r\n\r\n\r\nimport { FormContainer } from \"../../components/layout/FormContainer\";\r\n    )\r\n}*/\r\n\r\n\r\nimport React from \"react\";\r\nimport { PasswordRecoverForm } from \"./PasswordRecoverForm\";\r\nimport { FormContainer } from \"./FormContainer\";\r\n\r\nexport const PasswordRecovery = (props: any) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>Password Recover</h1>\r\n\r\n            <FormContainer>\r\n                <PasswordRecoverForm/>\r\n            </FormContainer>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Profile: React.FC = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <div>Profile</div>\r\n}","import React from \"react\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport {InputText} from \"../../components/InputText\";\r\nimport { Button } from \"../../components/Button\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const SignUp: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    return <>\r\n        <h1>SIGN UP</h1>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText type=\"email\" {...formik.getFieldProps('email')}/>\r\n            <InputText type=\"password\" {...formik.getFieldProps('password')}/>\r\n            <Button>Sign Up</Button>\r\n        </StyledForm>\r\n    </>\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {PasswordCreation} from \"../features/Password/PasswordCreation/PasswordCreation\";\r\nimport {PasswordRecovery} from \"../features/Password/PasswordRecovery/PasswordRecovery\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {SignUp} from \"../features/SignUp/SignUp\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>CARDS APP</h1>\r\n            <Switch>\r\n                <Route exact path={'/cards'} render={() => <Profile/>}/>\r\n                <Route path={'/profile'} render={() => <Profile/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n                <Route path={'/create-password'} render={() => <PasswordCreation/>}/>\r\n                <Route path={'/recover-password'} render={() => <PasswordRecovery/>}/>\r\n                <Route path={'/sign-up'} render={() => <SignUp/>}/>\r\n                <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitialized(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const AppReducer = slice.reducer\r\n\r\nexport const {\r\n    setAppStatus,\r\n    setAppError,\r\n    setIsInitialized\r\n} = slice.actions\r\n\r\n// action types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitialized>\r\nexport type ActionTypes = SetAppStatusActionType | SetAppErrorActionType | SetIsInitializedActionType\r\n\r\n// types\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import {combineReducers} from \"redux\";\r\nimport {AuthReducer} from \"../features/Login/auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {AppReducer} from \"./app-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {PasswordRecoveryReducer} from \"../features/Password/PasswordRecovery/password-recovery-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: AuthReducer,\r\n    app: AppReducer,\r\n    // createPassword: PasswordCreationReducer,\r\n    recoverPassword: PasswordRecoveryReducer,\r\n    // profile: ProfileReducer,\r\n    // signUp: SignUpReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}