{"version":3,"sources":["api/PATHS.ts","api/cards-api.ts","features/Profile/profile-reducer.ts","features/Login/auth-reducer.ts","components/InputText.tsx","components/Checkbox.tsx","components/Button.tsx","features/Login/Login.tsx","features/Password/PasswordCreation/PasswordCreation.tsx","features/Password/PasswordRecovery/password-recovery-reducer.ts","features/Password/PasswordRecovery/PasswordRecoverForm.tsx","features/Password/PasswordRecovery/FormContainer.tsx","features/Password/PasswordRecovery/PasswordRecovery.tsx","features/Profile/Profile.tsx","features/SignUp/sign-up-reducer.ts","features/SignUp/SignUp.tsx","app/App.tsx","reportWebVitals.ts","app/app-reducer.ts","app/store.ts","index.tsx"],"names":["PATHS","instance","axios","create","baseURL","withCredentials","cardsAPI","loginParams","post","passwordAPI","email","from","message","signUpAPI","password","slice","createSlice","name","initialState","_id","avatar","reducers","setProfile","state","action","payload","actions","ProfileReducer","reducer","isLoggedIn","setIsLoggedIn","AuthReducer","InputText","type","onChange","onChangeText","onKeyPress","onEnter","error","restProps","InputTextWrapper","StyledInput","e","currentTarget","value","key","StyledError","styled","div","input","Checkbox","Button","StyledButton","button","Login","useSelector","auth","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","console","log","then","response","data","catch","resetForm","to","profile","StyledForm","handleSubmit","getFieldProps","recoverPassword","signUp","form","PasswordCreation","passwordRecoverSlice","forgotPassword","setForgotPassword","PasswordRecoveryReducer","PasswordRecoverForm","placeholder","FormContainer","PasswordRecovery","props","createPassword","Profile","login","isSignedUp","setIsSignedUp","SignUpReducer","SignUp","App","className","exact","path","main","render","pageNotFound","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","status","isInitialized","setAppStatus","setAppError","setIsInitialized","AppReducer","rootReducer","combineReducers","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8843cb26.chunk.js","sourcesContent":["export enum PATHS {\r\n    main= '/cards',\r\n    profile = '/profile',\r\n    login = '/login',\r\n    createPassword = '/create-password',\r\n    recoverPassword = '/recover-password',\r\n    signUp = '/sign-up',\r\n    pageNotFound = '/404'\r\n}","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const cardsAPI = {\r\n    login(loginParams: LoginParamsType) {\r\n        return instance.post<LoginResponseType>('auth/login', loginParams)\r\n    }\r\n}\r\n\r\nexport const passwordAPI = {\r\n    recover(email: string, from: string) {\r\n        return instance.post<PassportRecoveryResponseType>('auth/forgot', {email, from, message: `<div style=\"background-color: lime; padding: 15px\">error: string;password recovery link:<a href='http://localhost:3000/#/set-new-password/$token$'></a>link</a></div>`})\r\n    }\r\n}\r\n\r\nexport const signUpAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post<SignUpResponseType>('auth/register', {email, password})\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\ntype PassportRecoveryResponseType = {\r\n    info: string,\r\n    error: string\r\n}\r\n\r\ntype SignUpResponseType = {\r\n    addedUser: any,\r\n    error?: string\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: ''\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'profile',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setProfile(state, action: PayloadAction<{_id: string, email: string, name: string, avatar: string | undefined}>) {\r\n            state._id = action.payload._id\r\n            state.email = action.payload.email\r\n            state.name = action.payload.name\r\n            state.avatar = action.payload.avatar\r\n        }\r\n    }\r\n})\r\n\r\nexport const {setProfile} = slice.actions\r\n\r\nexport const ProfileReducer = slice.reducer\r\n\r\ntype InitialStateType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string | undefined\r\n}","import {cardsAPI, LoginParamsType} from \"../../api/cards-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setProfile} from \"../Profile/profile-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{isLoggedIn: boolean}>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\n\r\nexport const AuthReducer = slice.reducer\r\n\r\n// thunks\r\nexport const loginTC = (loginParams: LoginParamsType) => (dispatch: Dispatch) => {\r\n    cardsAPI.login(loginParams)\r\n        .then((response) => {\r\n            const {_id, email, name, avatar} = response.data\r\n            dispatch(setProfile({_id, email, name, avatar}))\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n        })\r\n}\r\n\r\n\r\n// actions\r\nexport const {setIsLoggedIn} = slice.actions","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void;\r\n    onEnter?: () => void;\r\n    error?: string;\r\n};\r\n\r\nexport const InputText: React.FC<SuperInputTextPropsType> = ({\r\n                                                                 type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n                                                                 onChange,\r\n                                                                 onChangeText,\r\n                                                                 onKeyPress,\r\n                                                                 onEnter,\r\n                                                                 error,\r\n\r\n                                                                 ...restProps // все остальные пропсы попадут в объект restProps\r\n                                                             }) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && // если есть пропс onChange\r\n        onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" && // если нажата кнопка Enter\r\n        onEnter && // и есть пропс onEnter\r\n        onEnter(); // то вызвать его\r\n    };\r\n\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n    // Общие стили инпута\r\n    padding: 1rem 0.5rem;\r\n    margin-bottom: 20px;\r\n    height: 20px;\r\n    width: 400px;\r\n    \r\n   \r\n    border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n    position: absolute;\r\n    bottom: 1px;\r\n    // Стили текста ошибки\r\n    & > span {\r\n        \r\n        color: red;\r\n    }\r\n`;\r\n\r\n/*\r\nfont-size: ${({ theme }) => theme.font.size.s1};*/\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport styled, {StyledComponentProps} from \"styled-components/macro\";\r\n\r\ntype DefaultCheckboxPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultCheckboxPropsType & {\r\n    error?: string;\r\n};\r\n\r\nexport const Checkbox: React.FC<SuperCheckboxPropsType> = ({\r\n                                                               type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n                                                               error,\r\n                                                               ...restProps // все остальные пропсы попадут в объект restProps\r\n                                                           }) => {\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type=\"checkbox\"\r\n                {...restProps}\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n  // Общие стили инпута\r\n  padding: 1rem 0.5rem;\r\n  margin-bottom: 20px;\r\n  height: 20px;\r\n  width: 400px;\r\n\r\n\r\n  border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n  position: absolute;\r\n  bottom: 1px;\r\n  // Стили текста ошибки\r\n  & > span {\r\n\r\n    color: red;\r\n  }\r\n`;\r\n\r\n/*\r\nfont-size: ${({ theme }) => theme.font.size.s1};*/","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\nimport { ThemeType } from \"../common/Theme\";\r\n\r\n// тип пропсов обычной кнопки\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype PropsType = DefaultButtonPropsType;\r\n\r\nexport const Button: React.FC<PropsType> = ({ ...restProps }) => {\r\n    return <StyledButton {...restProps} />;\r\n};\r\n\r\n\r\n\r\n// Styles\r\nconst StyledButton = styled.button<StyledComponentProps<any, ThemeType, any, any>>`\r\n  border: none;\r\n  cursor: pointer;\r\n  color: white;\r\n  background-color:blue;\r\n  padding: 0.5rem 1rem;\r\n  width: 400px;\r\n  \r\n \r\n  &:hover {\r\n   background-color: grey;  \r\n  }\r\n`;\r\n","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {NavLink, Redirect } from \"react-router-dom\";\r\nimport styled from \"styled-components/macro\";\r\nimport {InputText} from \"../../components/InputText\";\r\nimport {Checkbox} from \"../../components/Checkbox\";\r\nimport { Button } from \"../../components/Button\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATHS.profile}/>\r\n    }\r\n\r\n    return <>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText error={formik.errors.email} type=\"email\" {...formik.getFieldProps('email')}/>\r\n            <div>\r\n                <NavLink to={PATHS.recoverPassword}>Forgot password?</NavLink>\r\n            </div>\r\n            <InputText error={formik.errors.password} type=\"password\" {...formik.getFieldProps('password')}/>\r\n            Remember me <Checkbox {...formik.getFieldProps('rememberMe')}/>\r\n            <Button>Login</Button>\r\n        </StyledForm>\r\n        <div>\r\n            <NavLink to={PATHS.signUp}>Sign up</NavLink>\r\n        </div>\r\n    </>\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n","import React from \"react\"\r\n\r\nexport const PasswordCreation: React.FC = () => {\r\n    return <div>Password Creation</div>\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {passwordAPI} from \"../../../api/cards-api\";\r\n\r\nexport const initialState = {\r\n    forgotPassword: false\r\n};\r\n\r\nconst passwordRecoverSlice = createSlice({\r\n    name: \"passwordRecover\",\r\n    initialState,\r\n    reducers: {\r\n        setForgotPassword(state, action: PayloadAction<{forgotPassword: boolean}>) {\r\n            state.forgotPassword = action.payload.forgotPassword\r\n        }\r\n    }\r\n});\r\n\r\nexport const PasswordRecoveryReducer = passwordRecoverSlice.reducer;\r\n\r\n// * Action creators\r\nexport const {setForgotPassword} = passwordRecoverSlice.actions;\r\n\r\n// * Thunks Creators\r\nexport const passwordRecoveryTC = (email: string, from: string) => (dispatch: Dispatch) => {\r\n    passwordAPI.recover(email, from)\r\n        .then(() => {\r\n            setForgotPassword({forgotPassword: true})\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n        })\r\n}","import { InputText } from \"../../../components/InputText\";\r\nimport { Button } from \"../../../components/Button\";\r\nimport React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport {passwordRecoveryTC} from \"./password-recovery-reducer\";\r\n\r\nexport const PasswordRecoverForm: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(passwordRecoveryTC(values.email, 'test-front-admin <nikita11042000@gmail.com>'))\r\n        }\r\n    });\r\n\r\n    return (\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n\r\n            <InputText placeholder={\"Email\"} error={formik.errors.email} {...formik.getFieldProps(\"email\")} />\r\n\r\n            <Button type=\"submit\">Recover</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\n// Styles\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n\r\n// Types\r\ntype FormikErrorType = {\r\n    email?: string\r\n}","import styled from \"styled-components/macro\";\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  height: 80%;\r\n  \r\n  align-self: center;\r\n  \r\n  &:only-child {\r\n    width: 50%;\r\n  }\r\n`","/*import React from \"react\"\r\nimport { PasswordRecoverForm } from \"./PasswordRecoverForm\";\r\nexport const PasswordRecovery: React.FC = () => {\r\n    return (<div>Password Recovery\r\n            <PasswordRecoverForm/>\r\n    </div>\r\n\r\n\r\nimport { FormContainer } from \"../../components/layout/FormContainer\";\r\n    )\r\n}*/\r\n\r\n\r\nimport React from \"react\";\r\nimport { PasswordRecoverForm } from \"./PasswordRecoverForm\";\r\nimport { FormContainer } from \"./FormContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../../api/PATHS\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\nexport const PasswordRecovery = (props: any) => {\r\n    const forgotPassword = useSelector<AppRootStateType, boolean>(state => state.recoverPassword.forgotPassword)\r\n\r\n    if (forgotPassword) {\r\n        return <Redirect to={PATHS.createPassword} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Password Recover</h1>\r\n            <FormContainer>\r\n                <PasswordRecoverForm/>\r\n            </FormContainer>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\n\r\nexport const Profile: React.FC = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.name)\r\n    const avatar = useSelector<AppRootStateType, string | undefined>(state => state.profile.avatar)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATHS.login}/>\r\n    }\r\n\r\n    return <div>\r\n        Avatar: {avatar}\r\n        Name: {name}\r\n    </div>\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {signUpAPI} from \"../../api/cards-api\";\r\n\r\nconst initialState = {\r\n    isSignedUp: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'signUp',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsSignedUp(state, action: PayloadAction<{isSignedUp: boolean}>) {\r\n            state.isSignedUp = action.payload.isSignedUp\r\n        }\r\n    }\r\n})\r\n\r\nexport const SignUpReducer = slice.reducer\r\n\r\nexport const {setIsSignedUp} = slice.actions\r\n\r\n// thunks\r\nexport const singUpTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    setIsSignedUp({isSignedUp: true})\r\n    signUpAPI.register(email, password)\r\n        .then(() => {\r\n            setIsSignedUp({isSignedUp: true})\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n        })\r\n}","import React, {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport {InputText} from \"../../components/InputText\";\r\nimport { Button } from \"../../components/Button\";\r\nimport {setIsSignedUp, singUpTC} from \"./sign-up-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const SignUp: React.FC = () => {\r\n\r\n    const isSignedUp = useSelector<AppRootStateType, boolean>(state => state.signUp.isSignedUp)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(singUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isSignedUp) {\r\n        return <Redirect to={PATHS.login}/>\r\n    }\r\n\r\n    return <>\r\n        <h1>SIGN UP</h1>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText error={formik.errors.email} type=\"email\" {...formik.getFieldProps('email')}/>\r\n            <InputText error={formik.errors.password} type=\"password\" {...formik.getFieldProps('password')}/>\r\n            <Button>Sign Up</Button>\r\n        </StyledForm>\r\n    </>\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n","import React from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {PasswordCreation} from \"../features/Password/PasswordCreation/PasswordCreation\";\r\nimport {PasswordRecovery} from \"../features/Password/PasswordRecovery/PasswordRecovery\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {SignUp} from \"../features/SignUp/SignUp\";\r\nimport {PATHS} from \"../api/PATHS\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>CARDS APP</h1>\r\n            <header>\r\n                <div><NavLink to={PATHS.profile}>profile</NavLink></div>\r\n                <div><NavLink to={PATHS.login}>login</NavLink></div>\r\n                <div><NavLink to={PATHS.createPassword}>createPassword</NavLink></div>\r\n                <div><NavLink to={PATHS.recoverPassword}>recoverPassword</NavLink></div>\r\n                <div><NavLink to={PATHS.signUp}>signUp</NavLink></div>\r\n            </header>\r\n            <Switch>\r\n                <Route exact path={PATHS.main} render={() => <Profile/>}/>\r\n                <Route path={PATHS.profile} render={() => <Profile/>}/>\r\n                <Route path={PATHS.login} render={() => <Login/>}/>\r\n                <Route path={PATHS.createPassword} render={() => <PasswordCreation/>}/>\r\n                <Route path={PATHS.recoverPassword} render={() => <PasswordRecovery/>}/>\r\n                <Route path={PATHS.signUp} render={() => <SignUp/>}/>\r\n                <Route path={PATHS.pageNotFound} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                <Redirect from={'*'} to={PATHS.pageNotFound}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitialized(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const AppReducer = slice.reducer\r\n\r\nexport const {\r\n    setAppStatus,\r\n    setAppError,\r\n    setIsInitialized\r\n} = slice.actions\r\n\r\n// action types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitialized>\r\nexport type ActionTypes = SetAppStatusActionType | SetAppErrorActionType | SetIsInitializedActionType\r\n\r\n// types\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'","import {combineReducers} from \"redux\";\r\nimport {AuthReducer} from \"../features/Login/auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {AppReducer} from \"./app-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {PasswordRecoveryReducer} from \"../features/Password/PasswordRecovery/password-recovery-reducer\";\r\nimport {ProfileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {SignUpReducer} from \"../features/SignUp/sign-up-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: AuthReducer,\r\n    app: AppReducer,\r\n    // createPassword: PasswordCreationReducer,\r\n    recoverPassword: PasswordRecoveryReducer,\r\n    profile: ProfileReducer,\r\n    signUp: SignUpReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}