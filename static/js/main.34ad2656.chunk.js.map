{"version":3,"sources":["api/PATHS.ts","api/api.ts","common/error-handler.ts","features/Profile/profile-reducer.ts","features/Login/auth-reducer.ts","components/InputText.tsx","components/Checkbox.tsx","components/Button.tsx","features/Login/Login.tsx","features/Password/PasswordCreation/PasswordCreation.tsx","features/Password/PasswordRecovery/password-recovery-reducer.ts","components/StyledForm.ts","features/Password/PasswordRecovery/PasswordRecoverForm.tsx","features/Password/PasswordRecovery/FormContainer.tsx","features/Password/PasswordRecovery/PasswordRecovery.tsx","features/Profile/Profile.tsx","features/SignUp/sign-up-reducer.ts","features/SignUp/SignUp.tsx","features/PacksTable/Pack/packs-reducer.ts","features/PacksTable/UpdatePackForm/UpdatePackForm.tsx","features/PacksTable/Pack/Pack.tsx","features/PacksTable/AddPackForm/AddPackForm.tsx","features/PacksTable/SuperDoubleRange.tsx","features/PacksTable/Pack/reducer-search.ts","features/PacksTable/Pagination.tsx","features/PacksTable/PacksTable.tsx","features/CardsTable/Card/cards-reducer.ts","features/CardsTable/UpdateCardForm/UpdateCardForm.tsx","features/CardsTable/Card/Card.tsx","features/CardsTable/AddCardForm/AddCardForm.tsx","features/CardsTable/CardsTable.tsx","features/LearnPage/learn-reducer.ts","features/LearnPage/LearnCardModal/LearnCardModal.tsx","features/LearnPage/LearnPage.tsx","app/App.tsx","reportWebVitals.ts","app/app-reducer.ts","app/store.ts","index.tsx"],"names":["PATHS","instance","axios","create","baseURL","withCredentials","loginAPI","loginParams","post","delete","passwordAPI","email","from","message","signUpAPI","password","packsAPI","getPacksParams","user_id","get","newPack","cardsPack","updatedPackData","put","packId","cardsAPI","getCardsParams","cardsPack_id","newCard","card","updatedCardData","cardId","learningAPI","grade","card_id","errorHandler","e","response","data","error","slice","createSlice","name","initialState","_id","avatar","reducers","setProfile","state","action","payload","getMe","dispatch","a","console","log","setIsLoggedIn","isLoggedIn","actions","ProfileReducer","reducer","AuthReducer","InputText","type","onChange","onChangeText","onKeyPress","onEnter","restProps","InputTextWrapper","StyledInput","currentTarget","value","key","StyledError","styled","div","input","Checkbox","Button","StyledButton","button","Login","useSelector","auth","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","to","profile","StyledForm","handleSubmit","getFieldProps","recoverPassword","signUp","form","PasswordCreation","passwordRecoverSlice","forgotPassword","setForgotPassword","PasswordRecoveryReducer","PasswordRecoverForm","React","memo","placeholder","FormContainer","PasswordRecovery","props","createPassword","Profile","useEffect","className","src","alt","onClick","login","isSignedUp","setIsSignedUp","SignUpReducer","SignUp","then","catch","setCardPacks","cardPacks","map","pack","packsReducer","fetchPacksTC","UpdatePackForm","modalCloseHandler","getState","packUser_id","style","marginTop","Pack","cardsCount","updated","classes","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","useStyles","useState","top","left","transform","modalStyle","open","setOpen","handleClose","body","deletePackTC","cards","learn","Modal","onClose","AddPackForm","SuperDoubleRange","setValue2","min","max","setValue1","Slider","event","valueLabelDisplay","aria-labelledby","cardPageTotalCount","count","searchCardName","countSelect","cardPages","pagesList","Pagination","pagesCount","search","portionSize","pageCount","Math","ceil","pageList","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","filter","p","display","PacksTable","packs","value1","value2","setSortPacks","flexDirection","justifyContent","alignItems","fontSize","marginRight","fontWeight","textAlign","setCards","extraReducers","builder","addCase","forEach","cardsReducer","fetchCardsTC","UpdateCardForm","cardPack_id","question","answer","Card","rating","deleteCardTC","AddCardForm","CardsTable","useParams","answerCorrect","undefined","displayAnswer","setAnswerCorrect","setDisplayAnswer","setCardToLearn","learnReducer","LearnCardModal","grades","pickCard","sum","reduce","acc","rand","random","res","newSum","id","updateGradeHandler","updatedGrade","updateGradeTC","gr","index","LearnPage","App","exact","path","main","render","pageNotFound","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","status","setAppStatus","setAppError","AppReducer","rootReducer","combineReducers","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34ad2656.chunk.js","sourcesContent":["export enum PATHS {\r\n    main= '/',\r\n    profile = '/profile',\r\n    login = '/login',\r\n    createPassword = '/create-password',\r\n    recoverPassword = '/recover-password',\r\n    signUp = '/sign-up',\r\n    pageNotFound = '/404',\r\n    packs = '/packsTable',\r\n    cards = '/cardsTable',\r\n    learn = '/learn'\r\n}","import axios from 'axios'\r\nimport {CardPackType} from \"../features/PacksTable/Pack/packs-reducer\";\r\nimport {CardType} from \"../features/CardsTable/Card/cards-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const loginAPI = {\r\n    login(loginParams: LoginParamsType) {\r\n        return instance.post<LoginResponseType>('auth/login', {...loginParams})\r\n    },\r\n    me() {\r\n        return instance.post<any>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<any>('auth/me')\r\n    }\r\n}\r\n\r\nexport const passwordAPI = {\r\n    recover(email: string, from: string) {\r\n        return instance.post<PassportRecoveryResponseType>('auth/forgot', {\r\n            email,\r\n            from,\r\n            message: `<div style=\"background-color: lime; padding: 15px\">error: string;password recovery link:<a href='https://neko-back.herokuapp.com/2.0/#/set-new-password/$token$'></a>link</a></div>`\r\n        })\r\n    }\r\n}\r\n\r\nexport const signUpAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post<SignUpResponseType>('auth/register', {email, password})\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(getPacksParams: GetPacksParamsType) {\r\n        const {\r\n            user_id\r\n        } = getPacksParams\r\n        return instance.get<GetPacksResponseType>(`cards/pack?pageCount=1000&page=4&user_id=${user_id}&sortPacks=0updated`)\r\n    },\r\n    addPack(newPack: AddPackParamsType) {\r\n        return instance.post('cards/pack', {cardsPack: newPack})\r\n    },\r\n    updatePack(updatedPackData: UpdatePackParamsType) {\r\n        return instance.put('cards/pack', {cardsPack: updatedPackData})\r\n    },\r\n    deletePack(packId: string) {\r\n        return instance.delete(`cards/pack?id=${packId}`)\r\n    }\r\n}\r\n\r\nexport const cardsAPI = {\r\n    getCards(getCardsParams: GetCardsParamsType) {\r\n        const {\r\n            cardsPack_id\r\n        } = getCardsParams\r\n        return instance.get<GetCardsResponseType>(`cards/card?`\r\n            + `cardsPack_id=${cardsPack_id}`\r\n        )\r\n    },\r\n    addCard(newCard: AddCardParamsType) {\r\n        return instance.post('cards/card', {card: newCard})\r\n    },\r\n    updateCard(updatedCardData: UpdateCardParamsType) {\r\n        return instance.put('cards/card', {card: updatedCardData})\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return instance.delete(`cards/card?id=${cardId}`)\r\n    }\r\n}\r\n\r\nexport const learningAPI = {\r\n    updateGrade(grade: number, card_id: string) {\r\n        return instance.put<UpdatedGradeResponseType>('cards/grade', {grade, card_id})\r\n    }\r\n}\r\n\r\n// * Types\r\n\r\n// ** loginAPI Types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\nexport type TypeCards = {\r\n    cardsCount: number\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    _id: string\r\n}\r\nexport type TypeResponsePacks = {\r\n    cardPacks: TypeCards[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n// ** passwordAPI Types\r\n\r\ntype PassportRecoveryResponseType = {\r\n    info: string,\r\n    error: string\r\n}\r\n\r\n// ** signUpAPI Types\r\n\r\ntype SignUpResponseType = {\r\n    addedUser: any,\r\n    error?: string\r\n}\r\n\r\n// ** packsAPI Types\r\n\r\nexport type GetPacksParamsType = {\r\n    user_id?: string\r\n}\r\n\r\nexport type GetPacksResponseType = {\r\n    cardPacks: CardPackType[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\nexport type AddPackParamsType = {\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: number\r\n    private?: boolean\r\n}\r\n\r\nexport type UpdatePackParamsType = {\r\n    _id: string\r\n    name?: string\r\n}\r\n\r\n// ** cardsAPI Types\r\n\r\nexport type GetCardsParamsType = {\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n}\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: CardType[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type AddCardParamsType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n}\r\n\r\nexport type UpdateCardParamsType = {\r\n    cardPack_id: string\r\n    question?: string\r\n    answer?: string\r\n}\r\n\r\ntype UpdatedGradeResponseType = {\r\n    updatedGrade: {\r\n        _id: string\r\n        cardsPack_id: string\r\n        card_id: string\r\n        user_id: string\r\n        grade: number\r\n        shots: number\r\n    }\r\n}","export const errorHandler = (e: any) => {\r\n    const error = e.response\r\n        ? e.response.data.error\r\n        : (e.message + ', more details in the console')\r\n}\r\n\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginAPI, passwordAPI} from \"../../api/api\";\r\nimport {setIsLoggedIn} from \"../Login/auth-reducer\";\r\nimport {errorHandler} from \"../../common/error-handler\";\r\nimport {setForgotPassword} from \"../Password/PasswordRecovery/password-recovery-reducer\";\r\nimport {AppThunk} from \"../../app/store\";\r\n\r\nconst initialState: InitialStateType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: ''\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'profile',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setProfile(state, action: PayloadAction<{_id: string, email: string, name: string, avatar: string | undefined}>) {\r\n            state._id = action.payload._id\r\n            state.email = action.payload.email\r\n            state.name = action.payload.name\r\n            state.avatar = action.payload.avatar\r\n        }\r\n    }\r\n})\r\n\r\n// thunks\r\n\r\nexport const getMe = (): AppThunk => async (dispatch) => {\r\n    try {\r\n        const response = await loginAPI.me()\r\n        console.log(response)\r\n        const {_id, email, name, avatar} = response.data\r\n        dispatch(setProfile({_id, email, name, avatar}))\r\n        dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\nexport const {setProfile} = slice.actions\r\n\r\nexport const ProfileReducer = slice.reducer\r\n\r\ntype InitialStateType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string | undefined\r\n}\r\n\r\ntype SliceActions<T> = {\r\n    [K in keyof T]: T[K] extends (...args: any[]) => infer A ? A : never;\r\n}[keyof T]\r\n\r\nexport type ProfileActionTypes = SliceActions<typeof slice.actions>","import {loginAPI, LoginParamsType, packsAPI} from \"../../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setProfile} from \"../Profile/profile-reducer\";\r\nimport {errorHandler} from \"../../common/error-handler\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {setCardPacks} from \"../PacksTable/Pack/packs-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{isLoggedIn: boolean}>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    }\r\n})\r\n\r\nexport const AuthReducer = slice.reducer\r\n\r\n// thunks\r\nexport const loginTC = (loginParams: LoginParamsType): AppThunk => async (dispatch) => {\r\n    try {\r\n        const response = await loginAPI.login(loginParams)\r\n        const {_id, email, name, avatar} = response.data\r\n        dispatch(setProfile({_id, email, name, avatar}))\r\n        dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\nexport const logoutTC = (): AppThunk => async (dispatch) => {\r\n    try {\r\n        await loginAPI.logout()\r\n        dispatch(setIsLoggedIn({isLoggedIn: false}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\n// actions\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n// types\r\n\r\ntype SliceActions<T> = {\r\n    [K in keyof T]: T[K] extends (...args: any[]) => infer A ? A : never;\r\n}[keyof T]\r\n\r\nexport type AuthActionTypes = SliceActions<typeof slice.actions>","import React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void;\r\n    onEnter?: () => void;\r\n    error?: string;\r\n};\r\n\r\nexport const InputText: React.FC<SuperInputTextPropsType> = ({\r\n                                                                 type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n                                                                 onChange,\r\n                                                                 onChangeText,\r\n                                                                 onKeyPress,\r\n                                                                 onEnter,\r\n                                                                 error,\r\n\r\n                                                                 ...restProps // все остальные пропсы попадут в объект restProps\r\n                                                             }) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && // если есть пропс onChange\r\n        onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" && // если нажата кнопка Enter\r\n        onEnter && // и есть пропс onEnter\r\n        onEnter(); // то вызвать его\r\n    };\r\n\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n    // Общие стили инпута\r\n    padding: 1rem 0.5rem;\r\n    margin-bottom: 20px;\r\n    height: 20px;\r\n    width: 400px;\r\n    \r\n   \r\n    border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n    position: absolute;\r\n    bottom: 1px;\r\n    // Стили текста ошибки\r\n    & > span {\r\n        \r\n        color: red;\r\n    }\r\n`;\r\n\r\n/*\r\nfont-size: ${({ theme }) => theme.font.size.s1};*/\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport styled, {StyledComponentProps} from \"styled-components/macro\";\r\n\r\ntype DefaultCheckboxPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultCheckboxPropsType & {\r\n    error?: string;\r\n};\r\n\r\nexport const Checkbox: React.FC<SuperCheckboxPropsType> = ({\r\n                                                               type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n                                                               error,\r\n                                                               ...restProps // все остальные пропсы попадут в объект restProps\r\n                                                           }) => {\r\n    return (\r\n        <InputTextWrapper>\r\n            <StyledInput\r\n                type=\"checkbox\"\r\n                {...restProps}\r\n            />\r\n            <StyledError>{error && <span>{error}</span>}</StyledError>\r\n        </InputTextWrapper>\r\n    );\r\n};\r\n\r\nconst InputTextWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled.input<StyledComponentProps<any, any, any, any>>`\r\n  // Общие стили инпута\r\n  padding: 1rem 0.5rem;\r\n  margin-bottom: 20px;\r\n  height: 20px;\r\n  width: 400px;\r\n\r\n\r\n  border: 1px solid rgb(109, 109, 109);\r\n`;\r\n// Стили контейнера с ошибкой\r\nconst StyledError = styled.div`\r\n  position: absolute;\r\n  bottom: 1px;\r\n  // Стили текста ошибки\r\n  & > span {\r\n\r\n    color: red;\r\n  }\r\n`;\r\n\r\n/*\r\nfont-size: ${({ theme }) => theme.font.size.s1};*/","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\r\nimport styled, { StyledComponentProps } from \"styled-components/macro\";\r\n\r\nimport { ThemeType } from \"../common/Theme\";\r\n\r\n// тип пропсов обычной кнопки\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype PropsType = DefaultButtonPropsType;\r\n\r\nexport const Button: React.FC<PropsType> = ({ ...restProps }) => {\r\n    return <StyledButton {...restProps} />;\r\n};\r\n\r\n\r\n\r\n// Styles\r\nconst StyledButton = styled.button<StyledComponentProps<any, ThemeType, any, any>>`\r\n  border: none;\r\n  cursor: pointer;\r\n  color: white;\r\n  background-color:blue;\r\n  padding: 0.5rem 1rem;\r\n  width: 400px;\r\n  \r\n \r\n  &:hover {\r\n   background-color: grey;  \r\n  }\r\n`;\r\n","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport styled from \"styled-components/macro\";\r\nimport {InputText} from \"../../components/InputText\";\r\nimport {Checkbox} from \"../../components/Checkbox\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\nimport { Button } from \"../../components/Button\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATHS.profile}/>\r\n    }\r\n\r\n    return <>\r\n        <h2>Sign in</h2>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText error={formik.errors.email} type=\"email\" {...formik.getFieldProps('email')}/>\r\n            <div><NavLink to={PATHS.recoverPassword}>Forgot password?</NavLink></div>\r\n            <InputText error={formik.errors.password} type=\"password\" {...formik.getFieldProps('password')}/>\r\n            Remember me <Checkbox {...formik.getFieldProps('rememberMe')}/>\r\n            <Button>Login</Button>\r\n        </StyledForm>\r\n        <div>\r\n            <NavLink to={PATHS.signUp}>Sign up</NavLink>\r\n        </div>\r\n    </>\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n","import React from \"react\"\r\n\r\nexport const PasswordCreation: React.FC = () => {\r\n    return <div>Password Creation</div>\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {passwordAPI} from \"../../../api/api\";\r\nimport {errorHandler} from \"../../../common/error-handler\";\r\nimport {AppThunk} from \"../../../app/store\";\r\n\r\nconst initialState = {\r\n    forgotPassword: false\r\n};\r\n\r\nconst passwordRecoverSlice = createSlice({\r\n    name: \"passwordRecover\",\r\n    initialState,\r\n    reducers: {\r\n        setForgotPassword(state, action: PayloadAction<{forgotPassword: boolean}>) {\r\n            state.forgotPassword = action.payload.forgotPassword\r\n        }\r\n    }\r\n});\r\n\r\nexport const PasswordRecoveryReducer = passwordRecoverSlice.reducer;\r\n\r\n// * Action creators\r\nexport const {setForgotPassword} = passwordRecoverSlice.actions;\r\n\r\n// * Thunks Creators\r\nexport const passwordRecoveryTC = (email: string, from: string): AppThunk => async (dispatch) => {\r\n    try {\r\n        await passwordAPI.recover(email, from)\r\n        dispatch(setForgotPassword({forgotPassword: true}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\ntype SliceActions<T> = {\r\n    [K in keyof T]: T[K] extends (...args: any[]) => infer A ? A : never;\r\n}[keyof T]\r\n\r\nexport type PasswordRecoverActionTypes = SliceActions<typeof passwordRecoverSlice.actions>","import styled from \"styled-components/macro\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;","import { InputText } from \"../../../components/InputText\";\r\nimport { Button } from \"../../../components/Button\";\r\nimport React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport {passwordRecoveryTC} from \"./password-recovery-reducer\";\r\nimport { StyledForm } from \"../../../components/StyledForm\";\r\n\r\nexport const PasswordRecoverForm = React.memo(() => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\";\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            return errors;\r\n        },\r\n        initialValues: {\r\n            email: \"\"\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(passwordRecoveryTC(values.email, 'test-front-admin <nikita11042000@gmail.com>'))\r\n        }\r\n    });\r\n\r\n    return (\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"Email\"} error={formik.errors.email} {...formik.getFieldProps(\"email\")} />\r\n            <Button type=\"submit\">Recover</Button>\r\n        </StyledForm>\r\n    );\r\n})\r\n\r\n// Types\r\ntype FormikErrorType = {\r\n    email?: string\r\n}","import styled from \"styled-components/macro\";\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  height: 80%;\r\n  \r\n  align-self: center;\r\n  \r\n  &:only-child {\r\n    width: 50%;\r\n  }\r\n`","import React from \"react\";\r\nimport { PasswordRecoverForm } from \"./PasswordRecoverForm\";\r\nimport { FormContainer } from \"./FormContainer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../../api/PATHS\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\nexport const PasswordRecovery = (props: any) => {\r\n    const forgotPassword = useSelector<AppRootStateType, boolean>(state => state.recoverPassword.forgotPassword)\r\n\r\n    if (forgotPassword) {\r\n        return <Redirect to={PATHS.createPassword} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Password recovery</h2>\r\n            <FormContainer>\r\n                <PasswordRecoverForm/>\r\n            </FormContainer>\r\n        </>\r\n    );\r\n};\r\n","import React, {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\nimport {logoutTC} from \"../Login/auth-reducer\";\r\nimport {getMe} from \"./profile-reducer\";\r\n\r\nexport const Profile: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.name)\r\n    const avatar = useSelector<AppRootStateType, string | undefined>(state => state.profile.avatar)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMe())\r\n    }, [])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATHS.login}/>\r\n    }\r\n\r\n    return <>\r\n        <h2>Profile</h2>\r\n        <div className=\"imgWrapper\">\r\n            <img src={avatar} alt=\"avatar\"/>\r\n        </div>\r\n        <div>\r\n            Name: {name}\r\n        </div>\r\n        {isLoggedIn && <button onClick={logoutHandler} >Logout</button>}\r\n    </>\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {signUpAPI} from \"../../api/api\";\r\n\r\nconst initialState = {\r\n    isSignedUp: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'signUp',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsSignedUp(state, action: PayloadAction<{isSignedUp: boolean}>) {\r\n            state.isSignedUp = action.payload.isSignedUp\r\n        }\r\n    }\r\n})\r\n\r\nexport const SignUpReducer = slice.reducer\r\n\r\nexport const {setIsSignedUp} = slice.actions\r\n\r\n// thunks\r\nexport const singUpTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    signUpAPI.register(email, password)\r\n        .then(() => {\r\n            debugger\r\n            setIsSignedUp({isSignedUp: true})\r\n        })\r\n        .catch(e => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n        })\r\n}\r\n\r\n// * Types\r\n\r\ntype SliceActions<T> = {\r\n    [K in keyof T]: T[K] extends (...args: any[]) => infer A ? A : never;\r\n}[keyof T]\r\n\r\nexport type SignUpActionTypes = SliceActions<typeof slice.actions>","import React, {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport styled from \"styled-components/macro\";\r\nimport {InputText} from \"../../components/InputText\";\r\nimport { Button } from \"../../components/Button\";\r\nimport {setIsSignedUp, singUpTC} from \"./sign-up-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n}\r\n\r\nexport const SignUp: React.FC = () => {\r\n\r\n    const isSignedUp = useSelector<AppRootStateType, boolean>(state => state.signUp.isSignedUp)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(singUpTC(values.email, values.password))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isSignedUp) {\r\n        return <Redirect to={PATHS.login}/>\r\n    }\r\n\r\n    return <>\r\n        <h2>Sign up</h2>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText error={formik.errors.email} type=\"email\" {...formik.getFieldProps('email')}/>\r\n            <InputText error={formik.errors.password} type=\"password\" {...formik.getFieldProps('password')}/>\r\n            <Button>Sign Up</Button>\r\n        </StyledForm>\r\n    </>\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`;\r\n","import {createSlice, PayloadAction, ThunkAction} from \"@reduxjs/toolkit\";\r\nimport {AddPackParamsType, GetPacksParamsType, packsAPI, UpdatePackParamsType} from \"../../../api/api\";\r\nimport {AppRootStateType, AppThunk} from \"../../../app/store\";\r\nimport {errorHandler} from \"../../../common/error-handler\";\r\n\r\nconst initialState: Array<CardPackType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'packs',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setCardPacks(state, action: PayloadAction<{ cardPacks: CardPackType[] }>) {\r\n            return action.payload.cardPacks.map(pack => ({...pack}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const packsReducer = slice.reducer\r\n\r\nexport const {setCardPacks} = slice.actions\r\n\r\n// * Thunks\r\n\r\nexport const fetchPacksTC = (getPacksParams: GetPacksParamsType): AppThunk => async (dispatch) => {\r\n    try {\r\n        const response = await packsAPI.getPacks(getPacksParams)\r\n        dispatch(setCardPacks({cardPacks: response.data.cardPacks}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\nexport const addPackTC = (newPack: AddPackParamsType): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    try {\r\n        await packsAPI.addPack(newPack)\r\n        const packUser_id = getState().profile._id\r\n        dispatch(fetchPacksTC({user_id: packUser_id}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\nexport const updatePackTC = (updatedPackData: UpdatePackParamsType): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    try {\r\n        await packsAPI.updatePack(updatedPackData)\r\n        const packUser_id = getState().profile._id\r\n        dispatch(fetchPacksTC({user_id: packUser_id}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\nexport const deletePackTC = (packId: string): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n    try {\r\n        await packsAPI.deletePack(packId)\r\n        const packUser_id = getState().profile._id\r\n        dispatch(fetchPacksTC({user_id: packUser_id}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\n// * Types\r\n\r\nexport type CardPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string\r\n    cardsCount: number\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    type: 'pack' | 'folder'\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n}\r\n\r\ntype SliceActions<T> = {\r\n    [K in keyof T]: T[K] extends (...args: any[]) => infer A ? A : never;\r\n}[keyof T]\r\n\r\nexport type PacksActionTypes = SliceActions<typeof slice.actions>\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, PacksActionTypes>","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {addPackTC, updatePackTC} from \"../Pack/packs-reducer\";\r\nimport {StyledForm} from \"../../../components/StyledForm\";\r\nimport {InputText} from \"../../../components/InputText\";\r\nimport {Button} from \"../../../components/Button\";\r\n\r\ntype UpdatePackFormType = {\r\n    _id: string\r\n    modalCloseHandler?: () => void\r\n}\r\n\r\nexport const UpdatePackForm: React.FC<UpdatePackFormType> = ({_id, modalCloseHandler}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: ''\r\n        },\r\n        validate: values => {\r\n            const errors = {} as FormikErrorsType\r\n            if (!values.name) {\r\n                errors.name = 'Name required'\r\n            }\r\n            if (values.name.length > 100) {\r\n                errors.name = 'Name is too long'\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            console.log({_id, ...values})\r\n            dispatch(updatePackTC({_id, ...values}))\r\n            if (modalCloseHandler) {\r\n                modalCloseHandler()\r\n            }\r\n        }\r\n    })\r\n\r\n    return <div style={{marginTop: '20px'}}>\r\n        <h3>Update pack</h3>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"Change name\"} error={formik.errors.name} {...formik.getFieldProps(\"name\")} />\r\n            <Button type=\"submit\">Update pack</Button>\r\n        </StyledForm>\r\n    </div>\r\n}\r\n\r\ntype FormikErrorsType = {\r\n    name?: string\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deletePackTC} from \"./packs-reducer\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {UpdatePackForm} from \"../UpdatePackForm/UpdatePackForm\";\r\nimport {PATHS} from \"../../../api/PATHS\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PackPropsType = {\r\n    packId: string\r\n    name: string\r\n    cardsCount: number\r\n    updated: string,\r\n}\r\n\r\nexport const Pack: React.FC<PackPropsType> = ({packId, name, cardsCount, updated}) => {\r\n\r\n    // Modal window code\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            position: 'absolute',\r\n            width: 400,\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }));\r\n\r\n    function getModalStyle() {\r\n        const top = 50;\r\n        const left = 50;\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState<boolean>(false)\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <UpdatePackForm _id={packId} modalCloseHandler={handleClose}/>\r\n        </div>\r\n    );\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deletePackTC(packId))\r\n    }\r\n    return <>\r\n\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{cardsCount}</td>\r\n            <td>{updated}</td>\r\n            <td>\r\n                <button type=\"button\" onClick={deleteHandler}>Delete</button>\r\n            </td>\r\n            <td>\r\n                <button type=\"button\" onClick={handleOpen}>Update</button>\r\n            </td>\r\n            <td>\r\n                <NavLink to={PATHS.cards + `/${packId}`}>cards</NavLink>\r\n            </td>\r\n            <td>\r\n                <NavLink to={PATHS.learn + `/${packId}`}>learn</NavLink>\r\n            </td>\r\n        </tr>\r\n        <Modal open={open} onClose={handleClose}>\r\n            {body}\r\n        </Modal>\r\n\r\n    </>\r\n}","import {InputText} from \"../../../components/InputText\";\r\nimport {Button} from \"../../../components/Button\";\r\nimport React from \"react\";\r\nimport {StyledForm} from \"../../../components/StyledForm\";\r\nimport {useFormik} from \"formik\";\r\nimport {addPackTC, fetchPacksTC} from \"../Pack/packs-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const AddPackForm: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: ''\r\n        },\r\n        validate: values => {\r\n            const errors = {} as FormikErrorsType\r\n            if (!values.name) {\r\n                errors.name = 'Name required'\r\n            }\r\n            if (values.name.length > 100) {\r\n                errors.name = 'Name is too long'\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            dispatch(addPackTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n\r\n    return <div style={{marginTop: '20px'}}>\r\n        <h3>Add pack</h3>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"name\"} error={formik.errors.name} {...formik.getFieldProps(\"name\")} />\r\n            <Button type=\"submit\">Add pack</Button>\r\n        </StyledForm>\r\n    </div>\r\n}\r\n\r\ntype FormikErrorsType = {\r\n    name?: string\r\n}\r\n\r\n","import React from \"react\";\r\nimport Slider from '@material-ui/core/Slider';\r\nimport s from './SuperRange.module.css'\r\ntype SuperDoubleRangePropsType = {\r\n    setValue2:(value:number)=>void\r\n    setValue1:(value:number)=>void\r\n    max:number\r\n    min:number\r\n\r\n}\r\n\r\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\r\n    {\r\n        setValue2,min,max,setValue1\r\n\r\n    }\r\n) => {\r\n\r\n    const onChange = (event: React.ChangeEvent<{}>, value:any) => {\r\n        // console.log(event)\r\n        setValue1(value[0])\r\n        setValue2(value[1])\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ width: '400px' }}>\r\n        <Slider\r\n            value={[min,max]}\r\n    onChange={onChange}\r\n    valueLabelDisplay='auto'\r\n    aria-labelledby=\"range-slider\"\r\n    max={10}\r\n    min={0}\r\n\r\n\r\n\r\n    />\r\n    </div>\r\n);\r\n}\r\n\r\nexport default SuperDoubleRange;","let initialState = {\r\n    cardPageTotalCount: 1609,\r\n    count: 10,\r\n    searchCardName: '',\r\n    countSelect:10,\r\n    cardPages:9,\r\n    pagesList:1,\r\n\r\n}\r\n\r\nexport const reducerSearch =\r\n    (state: SearchInitialStateType = initialState, action: ActionTypeSearch): SearchInitialStateType => {\r\n        switch (action.type) {\r\n            case 'SEARCH/CHANGE-TEXT-SEARCH':\r\n                return {...state, searchCardName: action.searchCardName}\r\n            case 'SEARCH/COUNT-OF-CARD':\r\n                return {...state, cardPages: action.count}\r\n            case \"SEARCH/PAGE-COUNT\":\r\n                return {...state,pagesList:action.pagesList}\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n//ActionCreator\r\n//???\r\nexport const cardNameAC = (searchCardName: string) => ({type: 'SEARCH/CHANGE-TEXT-SEARCH', searchCardName} as const)\r\nexport const cardCountAC = (count: number) => ({type: 'SEARCH/COUNT-OF-CARD',count} as const)\r\nexport const pagesListAC = (pagesList: number) => ({type: 'SEARCH/PAGE-COUNT',pagesList} as const)\r\n\r\n// Action Type\r\nexport type CardNameACType = ReturnType<typeof cardNameAC>\r\nexport type CardCountACType = ReturnType<typeof cardCountAC>\r\nexport type PagesListACACType = ReturnType<typeof pagesListAC>\r\n\r\n// Type\r\nexport type SearchInitialStateType = typeof initialState\r\n\r\ntype ActionTypeSearch =\r\n    | CardNameACType\r\n    | CardCountACType\r\n    | PagesListACACType","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {cardCountAC} from \"../PacksTable/Pack/reducer-search\";\r\nimport SuperSelect from \"../PacksTable/Pack/SuperSelect\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n\r\nconst Pagination = () => {\r\n    const pagesCount = useSelector<AppRootStateType,number>((state)=>state.search.cardPageTotalCount)\r\n    const portionSize = useSelector<AppRootStateType,number>((state)=>state.search.count)\r\n    let pageCount = Math.ceil(pagesCount/portionSize)\r\n    let pageList = []\r\n    for(let i=0; i<pageCount;i++){\r\n        pageList.push(i)\r\n    }\r\n    let portionCount = Math.ceil(pageCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    const dispatch = useDispatch()\r\n    const onChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        dispatch(cardCountAC(+e))\r\n    }\r\n    return (\r\n        <div>\r\n           {/* <SuperSelect onChangeOption={onChangeHandler} options={['3','4','5','6','7','8','9']}/>*/}\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {setPortionNumber(portionNumber - 1)}}>PREV</button>}\r\n            {pageList\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span style={{width:'30px',display:'alignItems'}}\r\n                    >{p}-</span>\r\n                })}\r\n            {portionCount > portionNumber && <button onClick={() => {setPortionNumber(portionNumber + 1)}}>\r\n                NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {CardPackType, fetchPacksTC } from \"./Pack/packs-reducer\";\r\nimport {Pack} from \"./Pack/Pack\";\r\nimport {AddPackForm} from \"./AddPackForm/AddPackForm\";\r\nimport  SuperDoubleRange  from \"./SuperDoubleRange\";\r\nimport Pagination from \"./Pagination\";\r\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop';\r\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom';\r\nimport {getMe} from \"../Profile/profile-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATHS} from \"../../api/PATHS\";\r\ntype TypeSort = 'max' | 'min' | 'middle';\r\n\r\n\r\nexport const PacksTable: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const packUser_id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const packs = useSelector<AppRootStateType, Array<CardPackType>>(state => state.packs)\r\n    const dispatch = useDispatch()\r\n    //\r\n     const [value1, setValue1] = useState<number>(0);\r\n     const [value2, setValue2] = useState<number>(10);\r\n    //\r\n    let [sortPacks, setSortPacks] = useState<TypeSort>(\"middle\");\r\n\r\n    useEffect(() => {\r\n        dispatch(getMe())\r\n        if(isLoggedIn) {\r\n            dispatch(fetchPacksTC({user_id: packUser_id}))\r\n        }\r\n    }, [])\r\n    //const [pageCount, setPageCount] = useState<number>(10);\r\n\r\n    const sortMax = () => {\r\n        setSortPacks(\"max\")\r\n    }\r\n    const sortMin = () => {\r\n        setSortPacks(\"min\")\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATHS.login}/>\r\n    }\r\n\r\n    return <div style={ {display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'} }>\r\n\r\n        <div>\r\n            <div>\r\n                <span style={{fontSize:'20px',marginRight:'10px'}}>Search:</span>\r\n                <input placeholder='Enter name'  type=\"text\"/>\r\n            </div>\r\n            <div>\r\n                <div style={{fontWeight:'bold',textAlign:'center'}}>Filtering by the count of cards</div>\r\n                <SuperDoubleRange setValue2={setValue2} setValue1={setValue1} max={value2} min={value1}/>\r\n            </div>\r\n\r\n            <div>\r\n                <VerticalAlignTopIcon onClick={sortMax}/>\r\n                <VerticalAlignBottomIcon onClick={sortMin}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Pagination/>\r\n            </div>\r\n\r\n        </div>\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Pack name</th>\r\n                <th>Cards count</th>\r\n                <th>Updated</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {packs.length === 0 && 'Waiting for your cards —ฅ/ᐠ.̫ .ᐟ\\\\ฅ—'}\r\n            {\r\n                packs.map(pack => {\r\n                    return <Pack\r\n                        key={pack._id}\r\n                        packId={pack._id}\r\n                        name={pack.name}\r\n                        cardsCount={pack.cardsCount}\r\n                        updated={pack.updated}\r\n                    />\r\n                })\r\n            }\r\n            </tbody>\r\n        </table>\r\n        <div style={ {display: 'flex', flexDirection: 'column', justifyContent: 'center'} }>\r\n            <AddPackForm/>\r\n        </div>\r\n    </div>\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setCardPacks} from \"../../PacksTable/Pack/packs-reducer\";\r\nimport {AddCardParamsType, cardsAPI, GetCardsParamsType, UpdateCardParamsType} from \"../../../api/api\";\r\nimport {errorHandler} from \"../../../common/error-handler\";\r\nimport {AppThunk} from \"../../../app/store\";\r\n\r\nconst initialState: InitialStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'cards',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setCards(state, action: PayloadAction<{ cards: CardType[], cardsPack_id: string }>) {\r\n            state[action.payload.cardsPack_id] = action.payload.cards\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(setCardPacks, (state, action) => {\r\n            action.payload.cardPacks.forEach((pack: { _id: string | number; }) => {\r\n                state[pack._id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const cardsReducer = slice.reducer\r\n\r\nexport const {setCards} = slice.actions\r\n\r\n// * Thunks\r\n\r\nexport const fetchCardsTC =  (getCardsParams: GetCardsParamsType): AppThunk => async (dispatch) => {\r\n    try {\r\n        const response = await cardsAPI.getCards(getCardsParams)\r\n        dispatch(setCards({cards: response.data.cards, cardsPack_id: getCardsParams.cardsPack_id}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\nexport const addCardTC = (newCard: AddCardParamsType, cardPack_id: string): AppThunk => async (dispatch) => {\r\n    try {\r\n        await cardsAPI.addCard(newCard)\r\n        dispatch(fetchCardsTC({cardsPack_id: cardPack_id}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\nexport const updateCardTC = (updatedCardData: UpdateCardParamsType): AppThunk => async (dispatch) => {\r\n    try {\r\n        await cardsAPI.updateCard(updatedCardData)\r\n        dispatch(fetchCardsTC({cardsPack_id: updatedCardData.cardPack_id}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\nexport const deleteCardTC = (cardId: string, cardPack_id: string): AppThunk => async (dispatch) => {\r\n    try {\r\n        await cardsAPI.deleteCard(cardId)\r\n        dispatch(fetchCardsTC({cardsPack_id: cardPack_id}))\r\n    } catch (e) {\r\n        errorHandler(e)\r\n    }\r\n}\r\n\r\n// * Types\r\n\r\ntype InitialStateType = {\r\n    [key: string]: Array<CardType>\r\n}\r\n\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: 'card'\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    _id: string\r\n}\r\n\r\ntype SliceActions<T> = {\r\n    [K in keyof T]: T[K] extends (...args: any[]) => infer A ? A : never;\r\n}[keyof T]\r\n\r\nexport type CardsActionTypes = SliceActions<typeof slice.actions>","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {StyledForm} from \"../../../components/StyledForm\";\r\nimport {InputText} from \"../../../components/InputText\";\r\nimport {Button} from \"../../../components/Button\";\r\nimport {updateCardTC} from \"../Card/cards-reducer\";\r\n\r\ntype UpdateCardFormPropsType = {\r\n    _id: string\r\n    cardPack_id: string\r\n    modalCloseHandler?: () => void\r\n}\r\n\r\nexport const UpdateCardForm: React.FC<UpdateCardFormPropsType> = ({_id, cardPack_id, modalCloseHandler}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            question: '',\r\n            answer: ''\r\n        },\r\n        validate: values => {\r\n            const errors = {} as FormikErrorsType\r\n            if (values.question.length > 100) {\r\n                errors.question = 'Question is too long'\r\n            }\r\n            if (values.answer.length > 100) {\r\n                errors.answer = 'Answer is too long'\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            const {answer, question} = values\r\n            dispatch(updateCardTC({cardPack_id, answer, question}))\r\n            formik.resetForm()\r\n            if (modalCloseHandler) {\r\n                modalCloseHandler()\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    return <div style={{marginTop: '20px'}}>\r\n        <h3>Add card</h3>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"Enter question\"} error={formik.errors.question} {...formik.getFieldProps(\"question\")} />\r\n            <InputText placeholder={\"Enter answer\"} error={formik.errors.answer} {...formik.getFieldProps(\"answer\")} />\r\n            <Button type=\"submit\">Add card</Button>\r\n        </StyledForm>\r\n    </div>\r\n}\r\n\r\ntype FormikErrorsType = {\r\n    question: string\r\n    answer: string\r\n}","import React, {useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteCardTC} from \"./cards-reducer\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport { UpdateCardForm } from \"../UpdateCardForm/UpdateCardForm\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\ntype CardPropsType = {\r\n    answer: string\r\n    question: string\r\n    grade: number\r\n    rating: number\r\n    cardPack_id: string\r\n    user_id: string\r\n    _id: string\r\n}\r\n\r\n\r\nexport const Card: React.FC<CardPropsType> = ({answer, question, grade, rating, _id , cardPack_id}) => {\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            position: 'absolute',\r\n            width: 400,\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }));\r\n\r\n    function getModalStyle() {\r\n        const top = 50;\r\n        const left = 50;\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState<boolean>(false)\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <UpdateCardForm _id={_id} cardPack_id={cardPack_id} modalCloseHandler={handleClose}/>\r\n        </div>\r\n    );\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteCardTC(_id, cardPack_id))\r\n    }\r\n\r\n    return <>\r\n        <tr>\r\n            <td>{question}</td>\r\n            <td>{answer}</td>\r\n            <td>{grade}</td>\r\n            <td>{rating}</td>\r\n            <td>\r\n                <button type=\"button\" onClick={deleteHandler}>Delete</button>\r\n            </td>\r\n            <td>\r\n                <button type=\"button\" onClick={handleOpen}>Update</button>\r\n            </td>\r\n        </tr>\r\n        <Modal open={open} onClose={handleClose}>\r\n            {body}\r\n        </Modal>\r\n    </>\r\n}","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {StyledForm} from \"../../../components/StyledForm\";\r\nimport {InputText} from \"../../../components/InputText\";\r\nimport {Button} from \"../../../components/Button\";\r\nimport {addCardTC} from \"../Card/cards-reducer\";\r\n\r\ntype AddCardFormPropsType = {\r\n    cardsPack_id: string\r\n    modalCloseHandler?: () => void\r\n}\r\n\r\nexport const AddCardForm: React.FC<AddCardFormPropsType> = ({cardsPack_id, modalCloseHandler}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            question: '',\r\n            answer: ''\r\n        },\r\n        validate: values => {\r\n            const errors = {} as FormikErrorsType\r\n            if (!values.question) {\r\n                errors.question = 'Question required'\r\n            }\r\n            if (values.question.length > 100) {\r\n                errors.question = 'Question is too long'\r\n            }\r\n            if (!values.answer) {\r\n                errors.answer = 'Answer required'\r\n            }\r\n            if (values.answer.length > 100) {\r\n                errors.answer = 'Answer is too long'\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            const {answer, question} = values\r\n            dispatch(addCardTC({cardsPack_id, answer, question}, cardsPack_id))\r\n            formik.resetForm()\r\n            if (modalCloseHandler) {\r\n                modalCloseHandler()\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    return <div style={{marginTop: '20px'}}>\r\n        <h3>Add card</h3>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"Enter question\"} error={formik.errors.question} {...formik.getFieldProps(\"question\")} />\r\n            <InputText placeholder={\"Enter answer\"} error={formik.errors.answer} {...formik.getFieldProps(\"answer\")} />\r\n            <Button type=\"submit\">Add card</Button>\r\n        </StyledForm>\r\n    </div>\r\n}\r\n\r\ntype FormikErrorsType = {\r\n    question: string\r\n    answer: string\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CardType, fetchCardsTC} from \"./Card/cards-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Card} from \"./Card/Card\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {AddCardForm} from \"./AddCardForm/AddCardForm\";\r\n\r\ntype CardsTablePropsType = {}\r\n\r\ntype CardsTableParamsType = {\r\n    packId: string\r\n}\r\n\r\nexport const CardsTable: React.FC<CardsTablePropsType> = () => {\r\n\r\n    const {packId} = useParams<CardsTableParamsType>()\r\n    const dispatch = useDispatch()\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            position: 'absolute',\r\n            width: 400,\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }));\r\n\r\n    function getModalStyle() {\r\n        const top = 50;\r\n        const left = 50;\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState<boolean>(false)\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <AddCardForm cardsPack_id={packId} modalCloseHandler={handleClose}/>\r\n        </div>\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCardsTC({cardsPack_id: packId}))\r\n    }, [])\r\n\r\n    const cards = useSelector<AppRootStateType, CardType[]>(state => state.cards[packId])\r\n\r\n    return <div style={ {display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'} }>\r\n        <h3>Cards Table</h3>\r\n        <button onClick={handleOpen}>Add card</button>\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>Question</th>\r\n                <th>Answer</th>\r\n                <th>Grade</th>\r\n                <th>Rating</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {cards && cards.length === 0 && 'Waiting for your cards —ฅ/ᐠ.̫ .ᐟ\\\\ฅ—'}\r\n            {\r\n                cards && cards.map(card => {\r\n                        return <Card\r\n                            key={card._id}\r\n                            _id={card._id}\r\n                            cardPack_id={card.cardsPack_id}\r\n                            answer={card.answer}\r\n                            grade={card.grade}\r\n                            question={card.question}\r\n                            rating={card.rating}\r\n                            user_id={card.user_id}\r\n                        />\r\n                    })\r\n            }\r\n            </tbody>\r\n        </table>\r\n        <Modal open={open} onClose={handleClose}>\r\n            {body}\r\n        </Modal>\r\n    </div>\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {CardType, fetchCardsTC} from \"../CardsTable/Card/cards-reducer\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {learningAPI} from \"../../api/api\";\r\n\r\nconst initialState: InitialStateType = {\r\n    card_id: '',\r\n    question: '',\r\n    answer: '',\r\n    answerCorrect: undefined,\r\n    displayAnswer: undefined\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'learn',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAnswerCorrect(state, action: PayloadAction<boolean | undefined>) {\r\n            state.answerCorrect = action.payload\r\n        },\r\n        setDisplayAnswer(state, action: PayloadAction<boolean | undefined>) {\r\n            state.displayAnswer = action.payload\r\n        },\r\n        setCardToLearn(state, action: PayloadAction<CardType>) {\r\n            state.card_id = action.payload._id\r\n            state.question = action.payload.question\r\n            state.answer = action.payload.answer\r\n        }\r\n    }\r\n})\r\n\r\nexport const learnReducer = slice.reducer\r\n\r\nexport const {\r\n    setAnswerCorrect,\r\n    setDisplayAnswer,\r\n    setCardToLearn\r\n} = slice.actions\r\n\r\n// * Thunks\r\n\r\nexport const updateGradeTC = (card_id: string, grade: number): AppThunk => async (dispatch) => {\r\n    const response = await learningAPI.updateGrade(grade, card_id)\r\n    // console.log(response.data)\r\n    const cardPack_id = response.data.updatedGrade.cardsPack_id\r\n    dispatch(fetchCardsTC({cardsPack_id: cardPack_id}))\r\n}\r\n\r\n// * Types\r\n\r\ntype InitialStateType = {\r\n    card_id: string\r\n    question: string\r\n    answer: string\r\n    answerCorrect: boolean | undefined\r\n    displayAnswer: boolean | undefined\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {updatePackTC} from \"../../PacksTable/Pack/packs-reducer\";\r\nimport {StyledForm} from \"../../../components/StyledForm\";\r\nimport {InputText} from \"../../../components/InputText\";\r\nimport {Button} from \"../../../components/Button\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {CardType} from \"../../CardsTable/Card/cards-reducer\";\r\nimport {setAnswerCorrect, setCardToLearn, setDisplayAnswer, updateGradeTC} from \"../learn-reducer\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\ntype LearnCardModalPropsType = {\r\n    pack: CardType[]\r\n    modalCloseHandler: () => void\r\n}\r\n\r\nexport const LearnCardModal: React.FC<LearnCardModalPropsType> = ({pack, modalCloseHandler}) => {\r\n\r\n    const card_id = useSelector<AppRootStateType, string>(state => state.learn.card_id)\r\n    const answerCorrect = useSelector<AppRootStateType, boolean | undefined>(state => state.learn.answerCorrect)\r\n    const displayAnswer = useSelector<AppRootStateType, boolean | undefined>(state => state.learn.displayAnswer)\r\n    const question = useSelector<AppRootStateType, string>(state => state.learn.question)\r\n    const answer = useSelector<AppRootStateType, string>(state => state.learn.answer)\r\n\r\n    const grades = [`didn't know`, 'knew badly', 'kinda knew', 'knew well', 'knew perfectly well']\r\n\r\n    const pickCard = (cards: CardType[]) => {\r\n        const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n        const rand = Math.random() * sum;\r\n        const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n                const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n                return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n            }\r\n            , {sum: 0, id: -1});\r\n        console.log('test: ', sum, rand, res)\r\n\r\n        const card = cards[res.id + 1]\r\n        dispatch(setCardToLearn(card))\r\n    }\r\n\r\n    const updateGradeHandler = (grade: number) => {\r\n        dispatch(updateGradeTC(card_id, grade))\r\n    }\r\n\r\n    useEffect(() => {\r\n        pickCard(pack)\r\n    }, [pack])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            answer: ''\r\n        },\r\n        validate: values => {\r\n            const errors = {} as FormikErrorsType\r\n            if (!values.answer) {\r\n                errors.name = 'Answer required'\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            console.log({...values})\r\n            if (values.answer === answer) {\r\n                console.log('success')\r\n                dispatch(setAnswerCorrect(true))\r\n            } else {\r\n                console.log('failure')\r\n                dispatch(setAnswerCorrect(false))\r\n            }\r\n            dispatch(setDisplayAnswer(true))\r\n        }\r\n    })\r\n\r\n    if (displayAnswer) {\r\n        return <div style={{marginTop: '20px'}}>\r\n            <h3>{answerCorrect && \"Success!!!\" || \"Failure\"}</h3>\r\n            <Button onClick={() => {\r\n                pickCard(pack)\r\n                dispatch(setDisplayAnswer(false))\r\n            }\r\n            }>Continue?</Button>\r\n            {\r\n                answerCorrect\r\n                && grades.map((gr, index) => {\r\n                    if (index >= 1) return <button onClick={() => updateGradeHandler(index + 1)}>{gr}</button>\r\n                })\r\n                || grades.map((gr, index) => {\r\n                    if (index <= 1) return <button onClick={() => updateGradeHandler(index + 1)}>{gr}</button>\r\n                })\r\n            }\r\n            <Button onClick={() => {\r\n                modalCloseHandler()\r\n                dispatch(setDisplayAnswer(false))\r\n            }}>Finish</Button>\r\n        </div>\r\n    }\r\n\r\n    return <div style={{marginTop: '20px'}}>\r\n        <h3>The question is as follows...</h3>\r\n        <p>{question}</p>\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <InputText placeholder={\"Enter your answer\"}\r\n                       error={formik.errors.answer} {...formik.getFieldProps(\"answer\")} />\r\n            <Button type=\"submit\">Submit answer</Button>\r\n        </StyledForm>\r\n    </div>\r\n}\r\n\r\n\r\ntype FormikErrorsType = {\r\n    name?: string\r\n}\r\n","import {CardType, fetchCardsTC} from \"../CardsTable/Card/cards-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport {UpdatePackForm} from \"../PacksTable/UpdatePackForm/UpdatePackForm\";\r\nimport {LearnCardModal} from \"./LearnCardModal/LearnCardModal\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\ntype LearnPageParamsType = {\r\n    packId: string\r\n}\r\n\r\nexport const LearnPage: React.FC = () => {\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            position: 'absolute',\r\n            width: 400,\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    }));\r\n\r\n    function getModalStyle() {\r\n        const top = 50;\r\n        const left = 50;\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n\r\n    const {packId} = useParams<LearnPageParamsType>()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCardsTC({cardsPack_id: packId}))\r\n    }, [])\r\n\r\n    const pack = useSelector<AppRootStateType, CardType[]>(state => state.cards[packId])\r\n\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState<boolean>(false)\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <LearnCardModal pack={pack} modalCloseHandler={handleClose}/>\r\n        </div>\r\n    );\r\n\r\n    return <>\r\n        <h3>Ready to learn?</h3>\r\n        <button onClick={handleOpen}>YES!</button>\r\n        <button>Nope</button>\r\n        <Modal open={open} onClose={handleClose}>\r\n            {body}\r\n        </Modal>\r\n    </>\r\n}","import React, {useEffect} from 'react';\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport './App.css';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {PasswordCreation} from \"../features/Password/PasswordCreation/PasswordCreation\";\r\nimport {PasswordRecovery} from \"../features/Password/PasswordRecovery/PasswordRecovery\";\r\nimport {Profile} from \"../features/Profile/Profile\";\r\nimport {SignUp} from \"../features/SignUp/SignUp\";\r\nimport {PATHS} from \"../api/PATHS\";\r\nimport {PacksTable} from \"../features/PacksTable/PacksTable\";\r\nimport { CardsTable } from '../features/CardsTable/CardsTable';\r\nimport {LearnPage} from \"../features/LearnPage/LearnPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header>\r\n                <h1>CARDS APP</h1>\r\n                <nav className=\"nav\">\r\n                    <div><NavLink to={PATHS.profile}>profile</NavLink></div>\r\n                    <div><NavLink to={PATHS.login}>login</NavLink></div>\r\n                    <div><NavLink to={PATHS.createPassword}>createPassword</NavLink></div>\r\n                    <div><NavLink to={PATHS.recoverPassword}>recoverPassword</NavLink></div>\r\n                    <div><NavLink to={PATHS.signUp}>signUp</NavLink></div>\r\n                    <div><NavLink to={PATHS.packs}>packs</NavLink></div>\r\n                </nav>\r\n            </header>\r\n            <div className=\"contentContainer\">\r\n                <Switch>\r\n                    <Route exact path={PATHS.main} render={() => <Profile/>}/>\r\n                    <Route path={PATHS.profile} render={() => <Profile/>}/>\r\n                    <Route path={PATHS.login} render={() => <Login/>}/>\r\n                    <Route path={PATHS.createPassword} render={() => <PasswordCreation/>}/>\r\n                    <Route path={PATHS.recoverPassword} render={() => <PasswordRecovery/>}/>\r\n                    <Route path={PATHS.signUp} render={() => <SignUp/>}/>\r\n                    <Route path={PATHS.packs} render={() => <PacksTable/>}/>\r\n                    <Route exact path={PATHS.cards + '/:packId'} render={() => <CardsTable/>}/>\r\n                    <Route exact path={PATHS.learn + '/:packId'} render={() => <LearnPage/>}/>\r\n                    <Route path={PATHS.pageNotFound} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={PATHS.pageNotFound}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginAPI} from \"../api/api\";\r\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        }\r\n    }\r\n})\r\n\r\nexport const AppReducer = slice.reducer\r\n\r\nexport const {\r\n    setAppStatus,\r\n    setAppError,\r\n} = slice.actions\r\n\r\n\r\n// action types\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>\r\nexport type ActionTypes = SetAppStatusActionType | SetAppErrorActionType\r\n\r\n// types\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype SliceActions<T> = {\r\n    [K in keyof T]: T[K] extends (...args: any[]) => infer A ? A : never;\r\n}[keyof T]\r\n\r\nexport type AppActionTypes = SliceActions<typeof slice.actions>","import {combineReducers} from \"redux\";\r\nimport {AuthActionTypes, AuthReducer} from \"../features/Login/auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {AppActionTypes, AppReducer} from \"./app-reducer\";\r\nimport {configureStore, ThunkAction} from \"@reduxjs/toolkit\";\r\nimport {\r\n    PasswordRecoverActionTypes,\r\n    PasswordRecoveryReducer\r\n} from \"../features/Password/PasswordRecovery/password-recovery-reducer\";\r\nimport {ProfileActionTypes, ProfileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {SignUpActionTypes, SignUpReducer} from \"../features/SignUp/sign-up-reducer\";\r\nimport {PacksActionTypes, packsReducer} from \"../features/PacksTable/Pack/packs-reducer\";\r\n//import {paskReducer} from \"../features/PacksTable/paskReducer\";\r\nimport {CardsActionTypes, cardsReducer} from \"../features/CardsTable/Card/cards-reducer\";\r\nimport {reducerSearch} from \"../features/PacksTable/Pack/reducer-search\";\r\nimport {learnReducer} from \"../features/LearnPage/learn-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: AuthReducer,\r\n    app: AppReducer,\r\n    // createPassword: PasswordCreationReducer,\r\n    recoverPassword: PasswordRecoveryReducer,\r\n    profile: ProfileReducer,\r\n    signUp: SignUpReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    learn: learnReducer,\r\n    search:reducerSearch,\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});\r\n\r\nexport type AppActionsType = AppActionTypes\r\n    | AuthActionTypes\r\n    | PasswordRecoverActionTypes\r\n    | ProfileActionTypes\r\n    | SignUpActionTypes\r\n    | PacksActionTypes\r\n    | CardsActionTypes\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}